---
description: Master orchestrator for complete code review workflow with logical phase progression
globs: 
alwaysApply: false
---
# Rule: Complete Code Review Orchestration

## Goal

To guide an AI assistant through a comprehensive, systematic code review process across all engineering disciplines. This orchestrator manages the complete 18-prompt analysis chain with optimized execution order and logical phase progression.

## 🔗 Enhanced Reasoning Integration

**IMPORTANT**: Use both Memory MCP and Sequential Thinking MCP for enhanced analysis:

### Memory MCP Integration
- Store findings, decisions, and patterns in memory for cross-session learning
- Reference previous analysis and build upon established knowledge  
- Tag entries appropriately for organization and retrieval

### Sequential Thinking MCP Usage
- Use `mcp__sequential-thinking__sequentialthinking` for complex analysis and reasoning
- Break down complex problems into systematic thinking steps
- Allow thoughts to evolve and build upon previous insights
- Question assumptions and explore alternative approaches
- Generate and verify solution hypotheses through structured reasoning

## Process Overview

This orchestrator manages a **6-phase code review workflow** with logical progression and optimal dependency management:

### Phase 1: Foundation & Technical Architecture (00-05)
**Objective**: Establish technical foundation and system understanding

### Phase 2: Security & Compliance (06-08) 
**Objective**: Comprehensive security and regulatory compliance analysis

### Phase 3: Quality & Testing (09-11)
**Objective**: Quality assurance, testing coverage, and operational excellence

### Phase 4: Documentation & Workflow (12-14)
**Objective**: Documentation quality and business workflow validation

### Phase 5: Production Readiness (15-16)
**Objective**: Deployment preparation and production validation

### Phase 6: Final Synthesis (17)
**Objective**: Comprehensive action planning and task generation

## Execution Phases

### 🏗️ Phase 1: Foundation & Technical Architecture

**Execute in order for optimal technical understanding:**

```bash
# Foundation Analysis
claude 2-code-review/01-codebase-overview.md
claude 2-code-review/02-architecture-analysis.md

# Core Technical Analysis (NEW ORDER IMPLEMENTED)
claude 2-code-review/03-api-contract-analysis.md      # Foundational API understanding
claude 2-code-review/04-database-optimization.md     # Foundational data layer  
claude 2-code-review/05-sequence-diagram-visualization.md  # Visual foundation

# Business Context (after technical foundation)
claude 2-code-review/06-business-analysis.md          # Business understanding
```

**Phase 1 Dependencies:**
- 01 → All subsequent prompts (foundation)
- 02 → All architectural decisions
- 03 → API documentation and testing strategies
- 04 → Performance and scaling decisions
- 05 → Business workflow understanding
- 06 → Integration and feature planning

### 🔒 Phase 2: Security & Compliance

**Execute after technical foundation is established:**

```bash
# Security Analysis Chain
claude 2-code-review/07-security-vulnerability-analysis.md
claude 2-code-review/08-dependency-security-analysis.md
claude 2-code-review/09-privacy-compliance-analysis.md
```

**Phase 2 Dependencies:**
- Requires: Phase 1 complete (architecture + API contracts)
- 07 → 08 → 09 (security findings build upon each other)
- All security findings feed into production readiness (Phase 5)

### ✅ Phase 3: Quality & Testing

**Execute after architecture and security foundation:**

```bash
# Quality Assurance Chain  
claude 2-code-review/10-test-coverage-analysis.md
claude 2-code-review/11-observability-monitoring.md
claude 2-code-review/12-pre-commit-quality-checks.md
```

**Phase 3 Dependencies:**
- Requires: Phase 1 (architecture) + Phase 2 (security context)
- 10 → Test strategy informs deployment preparation
- 11 → Monitoring setup required for production
- 12 → Quality gates for development workflow

### 📚 Phase 4: Documentation & Workflow

**Execute after core technical and quality analysis:**

```bash
# Documentation and Process Analysis
claude 2-code-review/13-documentation-generation.md
claude 2-code-review/14-api-documentation-generator.md
claude 2-code-review/15-business-workflow-consistency.md
```

**Phase 4 Dependencies:**
- Requires: All previous phases for comprehensive documentation
- 13 → General documentation quality
- 14 → API-specific documentation (requires Phase 1 API analysis)
- 15 → Business workflow validation (requires sequence diagrams from Phase 1)

### 🚀 Phase 5: Production Readiness

**Execute after all technical analysis is complete:**

```bash
# Production Deployment Analysis
claude 2-code-review/16-production-readiness-audit.md
claude 2-code-review/17-deployment-preparation.md
```

**Phase 5 Dependencies:**
- Requires: ALL previous phases (comprehensive readiness assessment)
- 16 → Identifies production blockers from all analyses
- 17 → Final deployment checklist and preparation

### 🎯 Phase 6: Final Synthesis

**Execute last - synthesizes all findings:**

```bash
# Comprehensive Action Planning
claude 2-code-review/18-comprehensive-todo-generation.md
```

**Phase 6 Dependencies:**
- Requires: ALL previous phases complete
- Transforms all findings into actionable tasks with priorities

## Execution Order (Implemented)

### Current vs. Recommended Order

| Original | Current | Prompt | Rationale |
|----------|---------|--------|-----------|
| 00 | 00 | Code Review Orchestrator | ✅ Master controller - no change |
| 00 | 01 | Codebase Overview | 📈 Foundation prompt |
| 01 | 02 | Architecture Analysis | 📈 Foundation - shifted by 1 |
| 02 | 06 | Business Analysis | 📈 Better after technical foundation |
| 03 | 07 | Security Vulnerability | 📈 Logical security grouping |
| 04 | 08 | Dependency Security | 📈 Logical security grouping |
| 05 | 09 | Privacy Compliance | 📈 Logical security grouping |
| 06 | 03 | API Contract Analysis | 📈 Core technical foundation |
| 07 | 04 | Database Optimization | 📈 Core technical foundation |
| 08 | 10 | Test Coverage | 📈 Logical quality grouping |
| 09 | 11 | Observability | 📈 Logical quality grouping |
| 10 | 12 | Pre-commit Quality | 📈 Logical quality grouping |
| 11 | 13 | Documentation | 📈 Logical documentation grouping |
| 12 | 14 | API Documentation | 📈 Logical documentation grouping |
| 13 | 16 | Production Readiness | 📈 Logical production grouping |
| 14 | 17 | Deployment Preparation | 📈 Logical production grouping |
| 15 | 05 | Sequence Diagrams | 📈 Visual foundation helps understanding |
| 16 | 15 | Business Workflow | 📈 After sequence diagrams |
| 17 | 18 | Todo Generation | 📈 Final synthesis - shifted by 1 |

## Quick Execution Commands

### Full Analysis (Optimized Order)
```bash
# Phase 1: Foundation & Technical Architecture
claude 2-code-review/01-codebase-overview.md && \
claude 2-code-review/02-architecture-analysis.md && \
claude 2-code-review/03-api-contract-analysis.md && \
claude 2-code-review/04-database-optimization.md && \
claude 2-code-review/05-sequence-diagram-visualization.md && \
claude 2-code-review/06-business-analysis.md

# Phase 2: Security & Compliance  
claude 2-code-review/07-security-vulnerability-analysis.md && \
claude 2-code-review/08-dependency-security-analysis.md && \
claude 2-code-review/09-privacy-compliance-analysis.md

# Phase 3: Quality & Testing
claude 2-code-review/10-test-coverage-analysis.md && \
claude 2-code-review/11-observability-monitoring.md && \
claude 2-code-review/12-pre-commit-quality-checks.md

# Phase 4: Documentation & Workflow
claude 2-code-review/13-documentation-generation.md && \
claude 2-code-review/14-api-documentation-generator.md && \
claude 2-code-review/15-business-workflow-consistency.md

# Phase 5: Production Readiness
claude 2-code-review/16-production-readiness-audit.md && \
claude 2-code-review/17-deployment-preparation.md

# Phase 6: Final Synthesis
claude 2-code-review/18-comprehensive-todo-generation.md
```

### Quick Analysis (Essential prompts only)
```bash
# Foundation + Key Analysis
claude 2-code-review/01-codebase-overview.md && \
claude 2-code-review/02-architecture-analysis.md && \
claude 2-code-review/07-security-vulnerability-analysis.md && \
claude 2-code-review/10-test-coverage-analysis.md && \
claude 2-code-review/16-production-readiness-audit.md && \
claude 2-code-review/18-comprehensive-todo-generation.md
```

### Focused Analysis (By concern area)
```bash
# Security Focus
claude 2-code-review/01-codebase-overview.md && \
claude 2-code-review/07-security-vulnerability-analysis.md && \
claude 2-code-review/08-dependency-security-analysis.md && \
claude 2-code-review/09-privacy-compliance-analysis.md

# Quality Focus  
claude 2-code-review/01-codebase-overview.md && \
claude 2-code-review/10-test-coverage-analysis.md && \
claude 2-code-review/11-observability-monitoring.md && \
claude 2-code-review/12-pre-commit-quality-checks.md

# Production Readiness Focus
claude 2-code-review/01-codebase-overview.md && \
claude 2-code-review/16-production-readiness-audit.md && \
claude 2-code-review/17-deployment-preparation.md
```

## Integration with Other Chains

### With Pre-Development Chain
```bash
# 1. Complete pre-development planning
claude 1-pre-development/1-create-prd.mdc
claude 1-pre-development/2-create-trd.mdc  
claude 1-pre-development/3-generate-tasks.mdc
claude 1-pre-development/4-validate-chain.mdc

# 2. Analyze existing codebase for integration
claude 2-code-review/00-code-review-orchestrator.mdc  # This file
# Follow with recommended execution order

# 3. Generate implementation plan
claude 1-pre-development/5-generate-sub-tasks.mdc
```

### With Memory Management
```bash
# Initialize memory context
claude 0-memory-related/m2-memory-retrieval.md

# Execute code review with memory integration
claude 2-code-review/00-code-review-orchestrator.mdc

# Store findings and maintain memory
claude 0-memory-related/m5-memory-maintenance.md
```

## Output Organization

All analysis outputs will be systematically organized in:

```
docs/code-review/
├── 1-CODEBASE_OVERVIEW.md
├── 2-ARCHITECTURE_ANALYSIS.md
├── 3-API_CONTRACT_ANALYSIS.md
├── 4-DATABASE_OPTIMIZATION.md
├── 5-SEQUENCE_DIAGRAM_VISUALIZATION.md
├── 6-BUSINESS_ANALYSIS.md
├── 7-SECURITY_ANALYSIS.md
├── 8-DEPENDENCY_SECURITY_ANALYSIS.md
├── 9-PRIVACY_COMPLIANCE_ANALYSIS.md
├── 10-TEST_COVERAGE_ANALYSIS.md
├── 11-OBSERVABILITY_MONITORING.md
├── 12-PRE_COMMIT_QUALITY_CHECKS.md
├── 13-DOCUMENTATION.md
├── 14-API_DOCUMENTATION.md
├── 15-BUSINESS_WORKFLOW_CONSISTENCY.md
├── 16-PRODUCTION_READINESS_AUDIT.md
├── 17-DEPLOYMENT_PREPARATION.md
├── 18-COMPREHENSIVE_TODO_LIST.md
└── components/, api/, monitoring/, diagrams/
```

## Memory Integration

Store comprehensive findings in memory with appropriate tags:
- `["code-review", "foundation", "phase-1"]` for foundation analysis
- `["code-review", "security", "phase-2"]` for security analysis  
- `["code-review", "quality", "phase-3"]` for quality analysis
- `["code-review", "documentation", "phase-4"]` for documentation analysis
- `["code-review", "production", "phase-5"]` for production readiness
- `["code-review", "synthesis", "phase-6"]` for final synthesis

## Success Criteria

### Phase Completion Criteria
- **Phase 1**: Technical foundation established, system architecture understood
- **Phase 2**: Security posture assessed, compliance gaps identified  
- **Phase 3**: Quality metrics established, testing strategy validated
- **Phase 4**: Documentation quality verified, workflows validated
- **Phase 5**: Production readiness confirmed, deployment plan ready
- **Phase 6**: Actionable task list generated with priorities and ownership

### Overall Success Metrics
- All 18 prompts executed successfully
- No critical production blockers identified
- Comprehensive task list with clear priorities
- Architecture compliance verified
- Security vulnerabilities addressed
- Quality gates established

## Final Instructions

1. **Execute in phases** - Don't rush through all prompts at once
2. **Validate dependencies** - Ensure each phase builds upon previous findings  
3. **Store in memory** - Use Memory MCP for cross-session continuity
4. **Review outputs** - Check that each analysis builds upon previous work
5. **Synthesize findings** - Use Phase 6 to create actionable plans
6. **Iterate if needed** - Re-run specific phases if major issues are discovered

This orchestrator ensures systematic, comprehensive code review with optimal execution order and clear phase progression for maximum analysis effectiveness.

## Todo List Generation Directive

**IMPORTANT**: Each individual code review prompt (01-17) MUST generate or append to a consolidated `code-review-todo-list.md` file. This ensures all findings are captured in a single, actionable document.

### Todo List Requirements for Each Prompt

At the end of each analysis prompt (01-17), include the following directive:

```markdown
## 📋 Todo List Generation

**REQUIRED**: Generate or append to `docs/code-review/code-review-todo-list.md` with findings from this analysis.

### Todo Entry Format
```markdown
## [Analysis Name] Findings

### 🔴 CRITICAL (Immediate Action Required)
- [ ] **[Task Title]**: [Brief description]
  - **Impact**: [High/Medium/Low]
  - **Effort**: [Time estimate]
  - **Files**: `[affected files]`
  - **Details**: [Additional context if needed]

### 🟡 HIGH (Sprint Priority)
- [ ] **[Task Title]**: [Brief description]
  - **Impact**: [High/Medium/Low]
  - **Effort**: [Time estimate]
  - **Files**: `[affected files]`

### 🟢 MEDIUM (Backlog)
- [ ] **[Task Title]**: [Brief description]
  - **Impact**: [High/Medium/Low]
  - **Effort**: [Time estimate]

### 🔵 LOW (Future Consideration)
- [ ] **[Task Title]**: [Brief description]
```

### Implementation
1. If `code-review-todo-list.md` doesn't exist, create it with proper header
2. Append findings under appropriate priority sections
3. Include specific file references and effort estimates
4. Tag with analysis type for filtering (e.g., `#security`, `#performance`, `#api`)
```

This directive ensures that:
1. All findings are captured in a single, consolidated todo list
2. Tasks are properly prioritized across all analysis dimensions
3. The final synthesis (prompt #18) has a complete dataset to work with
4. Teams can start working on critical items immediately without waiting for full analysis completion