#!/bin/bash

# Start MCP Stack for Lerian Protocol
# Orchestrates both board-service and board-mcp with proper dependency management

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
SERVICE_DIR="$PROJECT_ROOT/protocol-assets/lib/board-service"
MCP_DIR="$PROJECT_ROOT/protocol-assets/lib/board-mcp"

# Configuration
DEFAULT_SERVICE_PORT=3020
DEFAULT_MCP_PORT=3021
DEFAULT_HOST="localhost"
DEFAULT_DB_PATH="$PROJECT_ROOT/protocol-assets/infrastructure/data/databases/task-management.db"

SERVICE_PORT=${SERVICE_PORT:-$DEFAULT_SERVICE_PORT}
MCP_PORT=${MCP_PORT:-$DEFAULT_MCP_PORT}
HOST=${HOST:-$DEFAULT_HOST}
DB_PATH=${DB_PATH:-$DEFAULT_DB_PATH}

# PID management
PIDS_DIR="$PROJECT_ROOT/protocol-assets/infrastructure/data/pids"
STACK_PID_FILE="$PIDS_DIR/mcp-stack.pid"
SERVICE_PID_FILE="$PIDS_DIR/task-service.pid"
MCP_PID_FILE="$PIDS_DIR/board-mcp.pid"

# Logging
LOG_DIR="$PROJECT_ROOT/protocol-assets/infrastructure/data/logs"
SERVICE_LOG="$LOG_DIR/task-service.log"
MCP_LOG="$LOG_DIR/board-mcp.log"

# Colors and formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Helper functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_step() {
    echo -e "${BOLD}🔄 $1${NC}"
}

cleanup_on_exit() {
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        log_error "Stack startup failed, cleaning up..."
        "$SCRIPT_DIR/stop-mcp-stack.sh" --force 2>/dev/null || true
    fi
}

wait_for_service() {
    local url=$1
    local max_attempts=${2:-30}
    local attempt=1
    local wait_time=1
    
    log_step "Waiting for service at $url..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -f "$url" >/dev/null 2>&1; then
            log_success "Service is healthy at $url"
            return 0
        fi
        
        log_info "Attempt $attempt/$max_attempts: Service not ready, waiting ${wait_time}s..."
        sleep $wait_time
        
        # Exponential backoff, max 5s
        wait_time=$((wait_time < 5 ? wait_time + 1 : 5))
        attempt=$((attempt + 1))
    done
    
    log_error "Service failed to become healthy at $url after $max_attempts attempts"
    return 1
}

setup_environment_config() {
    log_step "Setting up environment configuration..."
    
    # Check if .env exists in board-service
    if [ ! -f "$SERVICE_DIR/.env" ]; then
        if [ -f "$SERVICE_DIR/.env.example" ]; then
            log_info "Creating .env from .env.example..."
            cp "$SERVICE_DIR/.env.example" "$SERVICE_DIR/.env"
            
            # Update .env with current configuration
            sed -i "s/^PORT=.*/PORT=$SERVICE_PORT/" "$SERVICE_DIR/.env"
            sed -i "s/^HOST=.*/HOST=$HOST/" "$SERVICE_DIR/.env"
            sed -i "s|^DB_PATH=.*|DB_PATH=$DB_PATH|" "$SERVICE_DIR/.env"
            sed -i "s|^VITE_API_BASE_URL=.*|VITE_API_BASE_URL=http://$HOST:$SERVICE_PORT|" "$SERVICE_DIR/.env"
            sed -i "s|^VITE_WS_URL=.*|VITE_WS_URL=ws://$HOST:$SERVICE_PORT|" "$SERVICE_DIR/.env"
            
            log_success "Environment configuration created and updated"
        else
            log_warning ".env.example not found, creating basic .env..."
            cat > "$SERVICE_DIR/.env" << EOF
# Board Service Configuration - Generated by start-mcp-stack.sh
PORT=$SERVICE_PORT
HOST=$HOST
NODE_ENV=development
DB_PATH=$DB_PATH
WS_HOST=$HOST
WS_PORT=$SERVICE_PORT
WS_PROTOCOL=ws
VITE_API_BASE_URL=http://$HOST:$SERVICE_PORT
VITE_WS_URL=ws://$HOST:$SERVICE_PORT
DEBUG=true
LOG_LEVEL=debug
EOF
            log_success "Basic environment configuration created"
        fi
    else
        log_info "Environment configuration already exists"
        
        # Update key values to match current script configuration
        if grep -q "^PORT=" "$SERVICE_DIR/.env"; then
            sed -i "s/^PORT=.*/PORT=$SERVICE_PORT/" "$SERVICE_DIR/.env"
        else
            echo "PORT=$SERVICE_PORT" >> "$SERVICE_DIR/.env"
        fi
        
        if grep -q "^VITE_WS_URL=" "$SERVICE_DIR/.env"; then
            sed -i "s|^VITE_WS_URL=.*|VITE_WS_URL=ws://$HOST:$SERVICE_PORT|" "$SERVICE_DIR/.env"
        else
            echo "VITE_WS_URL=ws://$HOST:$SERVICE_PORT" >> "$SERVICE_DIR/.env"
        fi
        
        log_success "Environment configuration synchronized"
    fi
}

check_prerequisites() {
    log_step "Checking prerequisites..."
    
    # Check curl for health checks
    if ! command -v curl &> /dev/null; then
        log_error "curl is not installed - required for health checks"
        exit 1
    fi
    
    # Check directories
    if [ ! -d "$SERVICE_DIR" ]; then
        log_error "Board service not found at $SERVICE_DIR"
        exit 1
    fi
    
    if [ ! -d "$MCP_DIR" ]; then
        log_error "Board MCP server not found at $MCP_DIR"
        exit 1
    fi
    
    # Setup environment configuration
    setup_environment_config
    
    # Check/install MCP dependencies (service dependencies handled by start-task-service.sh)
    if [ ! -d "$MCP_DIR/node_modules" ]; then
        log_step "Installing board-mcp dependencies..."
        cd "$MCP_DIR" && npm install
        log_success "Board MCP dependencies installed"
    fi
    
    # Create required directories
    mkdir -p "$PIDS_DIR" "$LOG_DIR"
    
    log_success "Prerequisites check completed"
}

start_board_service() {
    log_step "Starting board service using existing script..."
    
    # Set environment variables for the service
    export TASK_SERVICE_PORT="$SERVICE_PORT"
    export TASK_SERVICE_HOST="$HOST"
    export TASK_SERVICE_DB_PATH="$DB_PATH"
    
    if [ "$MODE" = "dev" ]; then
        # Development mode - delegate to existing script
        log_info "Starting service in development mode..."
        "$SCRIPT_DIR/start-task-service.sh" --dev
        # Note: In dev mode, the script blocks, so we won't reach here until stopped
    else
        # Background mode - use existing script's background functionality
        log_info "Starting service in background mode..."
        "$SCRIPT_DIR/start-task-service.sh" --background
        
        # The existing script handles PID file creation, so just verify it worked
        if [ -f "$SERVICE_PID_FILE" ]; then
            SERVICE_PID=$(cat "$SERVICE_PID_FILE")
            log_success "Board service started (PID: $SERVICE_PID)"
        else
            log_error "Service started but PID file not found"
            return 1
        fi
        
        # Wait for service to be healthy
        if ! wait_for_service "http://$HOST:$SERVICE_PORT/health"; then
            log_error "Board service failed to become healthy"
            return 1
        fi
    fi
}

start_board_mcp() {
    log_step "Configuring board MCP interface..."
    
    # Set environment variables for MCP server
    # Ensure SERVICE_PORT defaults to 3020 if not set
    ACTUAL_SERVICE_PORT=${SERVICE_PORT:-3020}  
    export TASK_SERVICE_URL="http://$HOST:$ACTUAL_SERVICE_PORT"
    
    log_info "MCP tools will connect to: $TASK_SERVICE_URL"
    
    cd "$MCP_DIR"
    
    if [ "$MODE" = "dev" ]; then
        # Development mode - MCP interface is available as library
        log_info "MCP interface available for development"
        return 0
    else
        # Test MCP interface connection to service
        log_info "Testing MCP interface connection..."
        
        # Test the health check through MCP interface
        local health_result=$(node src/index.js health 2>/dev/null)
        if echo "$health_result" | grep -q '"success".*true'; then
            log_success "Board MCP interface configured and connected"
            
            # Create a dummy PID file to indicate MCP is configured
            echo "$$" > "$MCP_PID_FILE"
            return 0
        else
            log_error "MCP interface failed to connect to board service"
            log_info "Health check result: $health_result"
            return 1
        fi
    fi
}

create_stack_pid() {
    # Create composite PID file for the stack
    {
        echo "STACK_MODE=$MODE"
        echo "STARTED=$(date -Iseconds)"
        echo "SERVICE_PORT=$SERVICE_PORT"
        echo "MCP_PORT=$MCP_PORT"
        echo "HOST=$HOST"
        [ -f "$SERVICE_PID_FILE" ] && echo "SERVICE_PID=$(cat "$SERVICE_PID_FILE")"
        [ -f "$MCP_PID_FILE" ] && echo "MCP_PID=$(cat "$MCP_PID_FILE")"
    } > "$STACK_PID_FILE"
}

print_status() {
    echo
    log_success "🚀 Lerian Protocol MCP Stack Started Successfully!"
    echo
    echo "   ${BOLD}Configuration:${NC}"
    echo "   ├── Mode: $MODE"
    echo "   ├── Board Service: http://$HOST:$SERVICE_PORT"
    if [ "$MODE" != "dev" ]; then
        echo "   ├── MCP Interface: Configured and ready"
    fi
    echo "   └── Database: $DB_PATH"
    echo
    echo "   ${BOLD}Useful Commands:${NC}"
    echo "   ├── Health Check: curl http://$HOST:$SERVICE_PORT/health"
    echo "   ├── List Tasks: curl http://$HOST:$SERVICE_PORT/api/tasks"
    echo "   ├── Stack Status: ./scripts/mcp-stack-status.sh"
    echo "   └── Stop Stack: ./scripts/stop-mcp-stack.sh"
    echo
    if [ "$MODE" != "dev" ]; then
        echo "   ${BOLD}Logs:${NC}"
        echo "   ├── Service: tail -f $SERVICE_LOG"
        echo "   └── MCP: tail -f $MCP_LOG"
        echo
    fi
}

# Main execution
main() {
    # Parse arguments
    MODE="dev"  # default mode - includes UI
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dev)
                MODE="dev"
                shift
                ;;
            --background)
                MODE="background"
                shift
                ;;
            --production)
                MODE="production"
                shift
                ;;
            --help|-h)
                echo "Usage: $0 [OPTIONS]"
                echo
                echo "Options:"
                echo "  --dev         Start in development mode (foreground, watching)"
                echo "  --background  Start in background mode (default)"
                echo "  --production  Start in production mode (background, no watching)"
                echo "  --help, -h    Show this help message"
                echo
                echo "Environment Variables:"
                echo "  TASK_SERVICE_PORT  Port for board service (default: $DEFAULT_SERVICE_PORT)"
                echo "  MCP_SERVER_PORT    Port for MCP server (default: $DEFAULT_MCP_PORT)"
                echo "  TASK_SERVICE_HOST  Host for services (default: $DEFAULT_HOST)"
                echo "  TASK_SERVICE_DB_PATH  Database path (default: relative to project)"
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                log_info "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    echo "🚀 Starting Lerian Protocol MCP Stack..."
    echo "   Mode: $MODE"
    echo "   Service Port: $SERVICE_PORT"
    echo "   Host: $HOST"
    echo
    
    # Set up cleanup trap
    trap cleanup_on_exit EXIT
    
    # Run startup sequence
    check_prerequisites
    start_board_service
    
    if [ "$MODE" != "dev" ]; then
        start_board_mcp
        create_stack_pid
    fi
    
    print_status
    
    # In dev mode, keep the script running
    if [ "$MODE" = "dev" ]; then
        log_info "Development mode: Press Ctrl+C to stop"
        # The npm run dev command will keep running
        wait
    fi
}

# Execute main function
main "$@"