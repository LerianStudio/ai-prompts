workflow:
  id: ui-ready
  name: UI-Only Backlog to Ready (Pure Frontend Workflow)
  description: >-
    Specialized workflow for pure UI/frontend tasks that require no business logic changes.
    Transforms UI-focused backlog items through design-first approach to create implementation-ready
    UI component tasks with comprehensive visual specifications and frontend-specific implementation guides.

  triggers:
    - task_type: 'ui'
    - labels:
        [
          'frontend',
          'ui',
          'component',
          'design-system',
          'styling',
          'responsive'
        ]
    - keywords:
        ['component', 'styling', 'layout', 'responsive', 'animation', 'theme']

  agents:
    - user-story-generator
    - ui-ux-specialist
    - frontend-developer
    - task-breakdown-specialist
    - todo-manager

  steps:
    - id: frontend-pattern-discovery
      title: Analyze Frontend Patterns and Design System
      agent: frontend-developer
      requires: protocol-assets/system/board/01.backlog/*/description.md
      creates: frontend-patterns.md
      action: Execute /analyze-frontend command to understand component patterns, design system, and UI conventions
      description: >
        Analyze the frontend codebase to understand component architecture, design system usage,
        styling patterns, and UI conventions. Focus on shadcn/ui patterns, component composition,
        and accessibility standards that will inform UI task creation.

    - id: ui-story-generation
      title: Generate UI-Focused User Stories
      agent: user-story-generator
      requires:
        - protocol-assets/system/board/01.backlog/*/description.md
        - frontend-patterns.md
      creates: ui-user-stories
      description: >
        Generate user stories specifically focused on UI/UX outcomes, visual requirements,
        and frontend user experience. Stories should emphasize visual acceptance criteria,
        interaction patterns, and accessibility requirements.

    - id: comprehensive-ui-design
      title: Create Pixel-Perfect UI Specifications
      agent: ui-ux-specialist
      requires:
        - ui-user-stories
        - frontend-patterns.md
      creates: protocol-assets/system/board/02.ready/[task-number]/ui-spec.md
      moves: protocol-assets/system/board/01.backlog/[task-number] → protocol-assets/system/board/02.ready/[task-number]
      action: MOVE from protocol-assets/system/board/01.backlog to protocol-assets/system/board/02.ready (removes original)
      description: >-
        Create comprehensive UI specifications including wireframes, pixel-perfect mockups,
        component breakdowns, interaction states, responsive behavior, accessibility requirements,
        and design system integration. Focus on visual completeness for pure UI implementation.

    - id: frontend-task-breakdown
      title: Break Down UI Design into Frontend Implementation Tasks
      agent: task-breakdown-specialist
      requires:
        - ui-user-stories
        - frontend-patterns.md
        - protocol-assets/system/board/02.ready/[task-number]/ui-spec.md
        - protocol-assets/content/docs/console/component-patterns.md
        - protocol-assets/content/docs/console/coding-conventions.md
      creates: protocol-assets/system/board/02.ready/[task-number] folder with Frontend-specific task folders
      # Tasks already in 02.ready - no additional move needed
      structure: |
        protocol-assets/system/board/02.ready/task-N/
        ├── description.md (original)
        ├── ui-spec.md (comprehensive UI design)
        ├── frontend-patterns.md (pattern analysis)
        ├── component-task-1/ (shadcn/ui component implementation)
        │   ├── description.md
        │   └── todos.md
        ├── styling-task-1/ (CSS/Tailwind styling implementation)
        │   ├── description.md
        │   └── todos.md
        ├── interaction-task-1/ (JavaScript interactions and animations)
        │   ├── description.md
        │   └── todos.md
        ├── responsive-task-1/ (Responsive design implementation)
        │   ├── description.md
        │   └── todos.md
        └── accessibility-task-1/ (A11y compliance and testing)
            ├── description.md
            └── todos.md

    - id: frontend-todo-generation
      title: Generate Frontend Implementation Todos
      agent: todo-manager
      requires:
        - protocol-assets/system/board/02.ready/[task-number]/component-task-*/description.md files
        - protocol-assets/system/board/02.ready/[task-number]/styling-task-*/description.md files
        - protocol-assets/system/board/02.ready/[task-number]/interaction-task-*/description.md files
        - protocol-assets/system/board/02.ready/[task-number]/responsive-task-*/description.md files
        - protocol-assets/system/board/02.ready/[task-number]/accessibility-task-*/description.md files
        - protocol-assets/system/board/02.ready/[task-number]/ui-spec.md (complete UI design reference)
        - protocol-assets/system/board/02.ready/[task-number]/frontend-patterns.md (pattern analysis)
        - protocol-assets/content/docs/console/component-patterns.md
      creates: todos.md files in each Frontend task folder

handoff_prompts:
  frontend-developer-to-user-story-generator: >-
    I've completed comprehensive frontend analysis using the analyze-frontend command. The analysis reveals:

    **Frontend Architecture Patterns:**
    {frontend_architecture_summary}

    **Component System:**
    {component_system_summary}

    **Styling Patterns:**
    {styling_patterns_summary}

    **Design System Usage:**
    {design_system_summary}

    **Accessibility Standards:**
    {accessibility_standards}

    Generated: `frontend-patterns.md` with complete frontend pattern analysis including:
    - shadcn/ui component patterns with Radix primitives
    - Tailwind CSS utility patterns and custom component classes
    - Responsive design breakpoints and mobile-first approaches
    - Animation and interaction patterns
    - Accessibility implementations (ARIA, semantic HTML)
    - Design token usage and theme system integration

    Please proceed with UI-focused user story generation, ensuring stories emphasize visual outcomes,
    interaction requirements, and frontend user experience goals.

  user-story-generator-to-ui-ux-specialist: >-
    I've analyzed the UI-focused backlog tasks and generated frontend-specific user stories:
    {ui_user_stories_summary}

    **Frontend Pattern Context:**
    - Component System: shadcn/ui with Radix primitives and compound patterns
    - Styling: Tailwind CSS with design system integration
    - Responsive: Mobile-first approach with established breakpoints
    - Accessibility: WCAG 2.1 AA compliance standards
    - Animations: Tailwind CSS animations with Framer Motion for complex interactions

    Please create comprehensive UI specifications that focus purely on visual design and frontend
    implementation. Since this is a UI-only workflow, emphasize:
    1. Pixel-perfect visual specifications
    2. Complete interaction state definitions
    3. Responsive behavior across all breakpoints
    4. Accessibility requirements and ARIA specifications
    5. Animation and transition specifications
    6. Component composition and reusability patterns

  ui-ux-specialist-to-task-breakdown-specialist: >-
    I have completed the comprehensive UI design phase for the frontend-focused user stories.
    The UI specification file (`ui-spec.md`) contains complete visual designs optimized for pure frontend implementation.

    Generated UI Specs:
    {ui_spec_files_summary}

    **UI Design Highlights:**
    - Complete component breakdowns with shadcn/ui integration
    - Pixel-perfect mockups with design system alignment
    - Comprehensive interaction state definitions
    - Responsive behavior specifications
    - Accessibility compliance requirements
    - Animation and transition specifications

    Your task is to break down these UI specifications into FRONTEND-SPECIFIC implementation tasks.
    Focus on creating specialized task types that align with frontend development workflows:

    FRONTEND-SPECIFIC TASK BREAKDOWN REQUIREMENTS:
    1. Tasks are already in `protocol-assets/system/board/02.ready`
    2. Create FRONTEND-SPECIFIC task folders:
       - `component-task-N/` for shadcn/ui component implementation
       - `styling-task-N/` for CSS/Tailwind styling and design system integration
       - `interaction-task-N/` for JavaScript interactions, animations, and state management
       - `responsive-task-N/` for responsive design implementation and breakpoint handling
       - `accessibility-task-N/` for A11y compliance, ARIA implementation, and testing
    3. Each task should be implementable by a frontend specialist without backend knowledge
    4. Follow established component patterns and naming conventions
    5. Ensure tasks are focused on visual outcomes and user experience

  task-breakdown-specialist-to-todo-manager: >-
    I've successfully broken down the UI specifications into frontend-specific development tasks.
    The task folder has been moved to `protocol-assets/system/board/02.ready` with specialized frontend task structure.

    Created frontend-specific structure in protocol-assets/system/board/02.ready:
    {frontend_task_files_list}

    Please analyze each frontend task description file and create corresponding `todos.md` files.
    Generate actionable implementation todos that are FRONTEND-SPECIFIC:
    - Component tasks: Focus on shadcn/ui implementation, props interface, composition patterns
    - Styling tasks: Focus on Tailwind CSS, design tokens, responsive utilities, custom styles
    - Interaction tasks: Focus on JavaScript interactions, animations, state management, event handling
    - Responsive tasks: Focus on breakpoint implementation, mobile-first approach, layout adaptations
    - Accessibility tasks: Focus on ARIA implementation, keyboard navigation, screen reader testing

    Each todo should be implementable by a frontend developer without requiring backend changes.

  workflow-completion: >-
    UI-Only Backlog processing workflow completed successfully!

    Summary of processed frontend work:
    - Analyzed frontend patterns and component architecture
    - Generated UI-focused user stories with visual acceptance criteria
    - Created comprehensive `ui-spec.md` files with pixel-perfect designs
    - Moved task folders to `protocol-assets/system/board/02.ready`
    - Created frontend-specific task folders (component, styling, interaction, responsive, accessibility)
    - Generated frontend-specific implementation `todos.md` files

    All tasks are now ready for pure frontend implementation using specialized UI workflows
    and can be assigned to frontend developers without backend dependencies.
