workflow:
  id: ui-logic-subtask
  name: UI-Logic Integration Implementation (Frontend Phase 2)
  description: >-
    Implements logic integration into existing UI components. Connects state management,
    API integration, event handling, and data flow without modifying UI presentation.
    Focused on frontend logic connection and integration patterns for Phase 2 implementation.

  agents:
    - todo-manager
    - frontend-developer
    - playwright-validator

  steps:
    - id: load-ui-logic-task
      title: Load UI-Logic Integration Todos and Move to In-Progress
      agent: todo-manager
      requires: protocol-assets/shared/board/02.ready/[task]/ui-logic-task-[N]/todos.md
      creates: protocol-assets/shared/board/03.done/[task]/ui-logic-task-[N]
      action: MOVE from protocol-assets/shared/board/02.ready to protocol-assets/shared/board/03.done (removes original)
      description: >-
        Load UI-logic integration todos focused on connecting existing UI
        components with business logic, state management, and API integration.
        Initialize TodoWrite with integration tasks.

    - id: implement-ui-logic-integration
      title: Implement Logic Integration into Existing UI Components
      agent: frontend-developer
      requires:
        - protocol-assets/shared/board/03.done/[task]/ui-logic-task-[N]/todos.md
        - protocol-assets/shared/board/03.done/[task]/ui-logic-spec.md
        - existing UI components (already implemented in Phase 1)
      creates:
        - state-management-integration
        - api-connection-implementations
        - event-handler-implementations
        - loading-states-and-error-boundaries
      description: >-
        Connect business logic to existing UI components through:
        - State management integration (React Context, Redux, Zustand)
        - API data fetching and caching (React Query, SWR, or custom hooks)
        - Event handler implementation for user interactions
        - Loading states and error boundary setup
        - Data flow between UI and logic layers
        - Performance optimization for logic connections

    - id: integration-validation
      title: Validate UI-Logic Integration and Data Flow
      agent: playwright-validator
      requires:
        - state-management-integration
        - api-connection-implementations
        - event-handler-implementations
        - loading-states-and-error-boundaries
      creates: ui-logic-integration-report.md
      description: >-
        Validate that UI-logic integration works correctly using Playwright MCP:
        - State updates reflect in UI correctly
        - API calls trigger proper loading/success/error states
        - Event handlers respond appropriately to user interactions
        - Data flows correctly between UI and logic layers
        - Error boundaries catch and display errors properly
        - Loading states provide appropriate user feedback

    - id: finalize-ui-logic-integration
      title: Finalize UI-Logic Integration and Move to Completed
      agent: todo-manager
      requires:
        - state-management-integration
        - api-connection-implementations
        - event-handler-implementations
        - loading-states-and-error-boundaries
        - ui-logic-integration-report.md
      creates: protocol-assets/shared/board/03.done/[task]/ui-logic-task-[N]
      action: MOVE from protocol-assets/shared/board/03.done to protocol-assets/shared/board/03.done (removes original)
      description: >-
        Update todos.md with completion status, package UI-logic integration
        implementation with validation results, and finalize task completion.

handoff_prompts:
  todo-manager-to-frontend-developer: >-
    Loaded UI-logic integration task and MOVED folder from protocol-assets/shared/board/02.ready to protocol-assets/shared/board/03.done.
    The original folder has been removed from 02.ready. UI components are already implemented from Phase 1.
    
    UI-Logic Integration Task Details:
    - Location: protocol-assets/shared/board/03.done/[task]/ui-logic-task-[N]/
    - Original location REMOVED: protocol-assets/shared/board/02.ready/[task]/ui-logic-task-[N]/ ✅
    - Integration Specs: protocol-assets/shared/board/03.done/[task]/ui-logic-spec.md
    - Existing UI Components: Already implemented and ready for logic connection
    - Total integration todos: {total_integration_todos}
    - Ready for logic integration: {pending_integration_todos}

    Your focus is connecting logic to existing UI WITHOUT changing presentation:
    
    **Integration Implementation Areas:**
    1. **State Management**: Connect React Context/Redux/Zustand to existing UI components
    2. **API Integration**: Implement data fetching and connect to existing UI data displays  
    3. **Event Handlers**: Connect user interactions to business logic functions
    4. **Loading States**: Add loading indicators to existing UI without changing layout
    5. **Error Boundaries**: Implement error handling that works with existing UI structure
    6. **Data Flow**: Ensure seamless data flow between logic and UI layers

    **Critical Requirements:**
    - Keep existing UI components intact - only add logic connections
    - Use TodoWrite to track progress on each integration todo
    - Mark each todo as "in_progress" → "completed" as you work through them
    - Focus on clean separation between UI presentation and business logic
    - Ensure integration follows established frontend patterns

  frontend-developer-to-playwright-validator: >-
    Completed UI-logic integration implementation. All logic connections have been established
    with existing UI components while maintaining presentation integrity.

    **Integration Implementation Summary:**
    - State Management: {state_management_implementation_summary}
    - API Connections: {api_integration_implementation_summary}
    - Event Handlers: {event_handler_implementation_summary}  
    - Loading States: {loading_states_implementation_summary}
    - Error Boundaries: {error_boundary_implementation_summary}

    **Generated Integration Assets:**
    - State management connections: {state_management_files}
    - API integration code: {api_integration_files}
    - Event handler implementations: {event_handler_files}
    - Loading state implementations: {loading_state_files}
    - Error boundary implementations: {error_boundary_files}

    **UI Preservation Verification:**
    - Existing UI components unchanged: ✅
    - Only logic connections added: ✅
    - Presentation layer integrity maintained: ✅

    Please perform comprehensive UI-logic integration validation using Playwright MCP:
    1. **State Flow Testing**: Verify state updates reflect correctly in UI
    2. **API Integration Testing**: Test data fetching, loading states, and error handling
    3. **Event Handler Testing**: Validate user interactions trigger appropriate logic
    4. **Error Boundary Testing**: Ensure errors are caught and displayed properly
    5. **Data Flow Testing**: Verify seamless data flow between UI and logic layers
    6. **Performance Testing**: Check integration doesn't impact UI performance

    Generate detailed integration validation report with test results and recommendations.

  playwright-validator-to-todo-manager: >-
    Comprehensive UI-logic integration validation completed using Playwright MCP tools.
    All integration points have been validated and tested for proper functionality.

    **Integration Validation Results:**
    - State Management Integration: {state_integration_success_rate}%
    - API Data Flow Validation: {api_integration_score}%
    - Event Handler Responsiveness: {event_handler_score}%
    - Loading States Functionality: {loading_states_score}%
    - Error Boundary Coverage: {error_boundary_score}%
    - UI Performance Impact: {performance_impact_score}%

    **Validation Evidence:**
    - Integration test screenshots: {integration_screenshots_paths}
    - State flow validation results: {state_flow_validation_results}
    - API integration test logs: {api_integration_test_logs}
    - Event handler test evidence: {event_handler_test_evidence}
    - Error boundary test results: {error_boundary_test_results}

    **UI Integrity Verification:**
    - Original UI components preserved: ✅
    - No presentation layer modifications: ✅
    - Logic connections working seamlessly: ✅
    - User experience enhanced, not changed: ✅

    Please finalize the UI-logic integration task by:
    1. Updating todos.md with final completion status and integration test scores
    2. MOVING the sub-task to completed status (mv command)
    3. VERIFY the original folder is REMOVED from source location
    4. Package UI-logic integration with validation results for feature completion
    5. Generate handoff documentation for Phase 2 completion

  workflow-completion: >-
    UI-Logic Integration implementation workflow completed successfully!

    **Summary of Phase 2 Frontend Implementation:**
    - Loaded UI-logic integration todos and moved through board states properly
    - Implemented comprehensive logic connections to existing UI components
    - Connected state management, API integration, and event handling
    - Preserved UI presentation integrity while adding business logic
    - Validated all integration points using Playwright testing
    - Generated comprehensive integration test results and validation reports

    **Phase 2 Completion Verification:**
    - UI-logic task exists ONLY in protocol-assets/shared/board/03.done/
    - Original folders properly REMOVED from previous board states
    - All integration todos marked as completed with validation evidence
    - UI presentation layer unchanged, logic connections functional

    **Feature Integration Status:**
    - Phase 1 (UI-only): UI components implemented ✅
    - Phase 2 (UI-logic): Logic successfully integrated ✅
    - Complete feature ready for deployment with full UI-logic integration

    The two-phase frontend approach has been successfully executed:
    existing UI components now have full business logic integration
    while maintaining clean separation of concerns and presentation integrity.