workflow:
  id: ui-subtask
  name: UI-Only Implementation with Visual Validation (@task-manager)
  description: >-
    Database-backed workflow for UI implementation using @task-manager system.
    Takes a task_id, implements UI components without business logic using frontend-developer,
    focuses on pure visual components, styling, and basic interactions with centralized progress tracking.

  agents:
    - .claude/agents/frontend/frontend-developer.md
    - .claude/agents/frontend/playwright-validator.md

  steps:
    - id: load-and-start-ui-task
      title: Load Task and Set to In-Progress
      agent: .claude/agents/frontend/frontend-developer.md
      requires: task_id (input parameter)
      creates: task details loaded from database
      action: Use @task-manager.getTask() and @task-manager.updateTaskStatus(task_id, "in_progress")
      description: >-
        Load the UI implementation task from database and set status to in_progress.
        Review task description for UI specifications and todo structure.
        Understand the implementation phases and requirements.

    - id: implement-ui-only-todos
      title: Implement UI-Only Todos (Visual Components, Styling, Basic Interactions)
      agent: .claude/agents/frontend/frontend-developer.md
      requires:
        - task_id with loaded task details
        - ui specification from task description
      creates:
        - ui-component-implementations
        - styling-implementations
        - basic-interaction-code
      action: Use @task-manager.completeTodoItem() for each completed todo
      description: >-
        Implement UI todos sequentially focusing ONLY on visual presentation:
        - UI component structure and markup
        - CSS/Tailwind styling and responsive design
        - Basic interactions (hover, focus, click handlers without business logic)
        - Accessibility implementation (ARIA, semantic HTML)
        - Visual validation against design specifications
        - NO business logic, API integration, or state management

        Progress tracking via @task-manager.completeTodoItem(task_id, todoContent) for each completed todo.
        Task will auto-complete when all todos are finished.

    - id: playwright-validation
      title: Simple Playwright Screenshot Validation
      agent: .claude/agents/frontend/playwright-validator.md
      requires:
        - ui-implementation-code
        - task_id for accessing UI specifications
      creates:
        - playwright-screenshots
      description: >-
        Use Playwright MCP to take screenshots of implementation.
        Get UI specifications from task description via @task-manager.getTask().
        Compare against design specs for basic visual validation.
        Focus on desktop functionality only.

    - id: verify-task-completion
      title: Verify Task Completion Status
      agent: .claude/agents/frontend/frontend-developer.md
      requires:
        - ui-implementation-code
        - playwright-screenshots
        - task_id
      creates: final task status verification
      action: Use @task-manager.getTask() to verify all todos completed
      description: >-
        Verify that all todos have been completed and task status is "completed".
        If not all todos are done, identify remaining work and complete it.
        Ensure task automatically transitioned to completed status.

handoff_prompts:
  workflow-start-to-frontend-developer: >-
    **DATABASE-BACKED UI IMPLEMENTATION WORKFLOW**

    Input: task_id = {task_id}

    Your task: Implement UI-only components using the @task-manager system:

    1. **Load Task**: Use @task-manager.getTask(task_id) to get task details, UI specs, and todos
    2. **Set Status**: Use @task-manager.updateTaskStatus(task_id, "in_progress") to start work
    3. **Review Structure**: Understand the todo phases:
       - Component Development phase
       - Styling Implementation phase
       - Interactive Features phase
       - Responsive Design phase  
       - Accessibility Compliance phase
       - Testing & Integration phase

    4. **Implementation Loop**: For each todo:
       - Implement the specific requirement
       - Use @task-manager.completeTodoItem(task_id, todoContent) to mark done
       - Continue to next todo

    5. **UI-Only Focus**: NO business logic, API calls, or complex state management
    6. **Progress Tracking**: All progress centralized in database, no file operations needed

    The task will automatically complete when all todos are finished.

  frontend-developer-to-playwright-validator: >-
    I've completed implementing all UI-only todos using the @task-manager system.
    No business logic, API integration, or state management has been implemented - only pure UI.

    **Task Details:**
    - Task ID: {task_id}
    - Implementation Status: All todos completed via @task-manager.completeTodoItem()
    - Task Status: {current_task_status}

    **UI-Only Implementation Summary:**
    - UI Components: {ui_component_implementations_summary}
    - Styling: {styling_implementations_summary}  
    - Basic Interactions: {basic_interactions_summary}
    - Accessibility: {accessibility_implementations_summary}

    Please use Playwright MCP to validate the UI-only implementation:
    1. Use @task-manager.getTask({task_id}) to access UI specifications
    2. Take screenshots of implemented UI components
    3. Compare visual presentation against UI specs in task description
    4. Verify basic interactions work (hover, focus, click - no business logic)
    5. Focus on desktop functionality and visual correctness
    6. Confirm NO business logic is present - pure UI only

    Keep validation simple - verify UI looks correct and basic interactions respond.

  playwright-validator-to-workflow-completion: >-
    Simple Playwright validation completed using MCP tools.

    **Task ID: {task_id}**
    - Accessed task specifications via @task-manager.getTask()
    - Took desktop screenshots of implemented components
    - Verified basic visual correctness against design specs from task description
    - Confirmed functional interactions work properly
    - Verified NO business logic present - pure UI implementation only

    Task validation complete. All UI components implemented according to specifications.

  workflow-completion: >-
    UI-Only Implementation workflow completed successfully using @task-manager!

    **Task Summary:**
    - Task ID: {task_id}
    - Final Status: {final_task_status}
    - Total Todos: {total_todos}
    - Completed Todos: {completed_todos}

    **Database-Backed Benefits Achieved:**
    - ✅ Reliable progress tracking vs fragile file operations
    - ✅ Atomic todo completion with transaction safety
    - ✅ Centralized task state visible to all agents
    - ✅ Auto task completion when all todos finished
    - ✅ No file system dependencies or mv operations
    - ✅ Task_id-based coordination across workflow steps

    **Implementation Results:**
    - Created pixel-perfect, accessible, responsive UI components (NO business logic)
    - Focused purely on visual presentation, styling, and basic interactions
    - Performed visual validation using Playwright MCP tools
    - All progress tracked in centralized database

    **Phase 1 Complete:**
    - UI components implemented with NO business logic ✅
    - Visual presentation matches design specifications ✅  
    - Basic interactions functional (no business logic) ✅
    - Ready for Phase 2 logic integration ✅

    **Next Steps:**
    The task is ready for Phase 2 logic integration. Implementation agents can:
    - Access task via @task-manager.getTask({task_id})
    - Add business logic to existing pure UI components
    - Continue progress tracking with additional todos if needed

    The robust database backing ensures reliable coordination for complex multi-phase workflows!
