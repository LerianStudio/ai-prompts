workflow:
  id: ui-ready
  name: UI-Only Backlog to Ready (@task-manager)
  description: >-
    Database-backed workflow for pure UI/frontend tasks using @task-manager system.
    Transforms UI-focused backlog items through design-first approach to create implementation-ready
    tasks with comprehensive visual specifications and structured todos.

  triggers:
    - task_type: 'ui'
    - labels:
        [
          'frontend',
          'ui', 
          'component',
          'design-system',
          'styling',
          'responsive'
        ]
    - keywords:
        ['component', 'styling', 'layout', 'responsive', 'animation', 'theme']

  agents:
    - user-story-generator
    - ui-ux-specialist
    - frontend-developer
    - task-breakdown-specialist

  steps:
    - id: frontend-pattern-discovery
      title: Analyze Frontend Patterns and Design System
      agent: frontend-developer
      requires: backlog_description.md (input requirement)
      creates: frontend-patterns.md
      action: Execute /analyze-frontend command to understand component patterns, design system, and UI conventions
      description: >
        Analyze the frontend codebase to understand component architecture, design system usage,
        styling patterns, and UI conventions. Focus on shadcn/ui patterns, component composition,
        and accessibility standards that will inform UI task creation.

    - id: ui-story-generation
      title: Generate UI-Focused User Stories
      agent: user-story-generator
      requires:
        - backlog_description.md
        - frontend-patterns.md
      creates: ui-user-stories (structured data)
      description: >
        Generate user stories specifically focused on UI/UX outcomes, visual requirements,
        and frontend user experience. Stories should emphasize visual acceptance criteria,
        interaction patterns, and accessibility requirements.

    - id: simple-ui-design
      title: Create Simple UI Specifications
      agent: ui-ux-specialist
      requires:
        - ui-user-stories
        - frontend-patterns.md
      creates: ui-spec.md (temporary file for task-breakdown-specialist)
      description: >-
        Create simple UI specifications focused on desktop implementation.
        Include basic component requirements, simple visual layout, essential styling guidance,
        and basic interactions. Follow project patterns and keep it practical.

    - id: database-task-creation
      title: Create Database-Backed Implementation Task
      agent: task-breakdown-specialist
      requires:
        - ui-user-stories
        - frontend-patterns.md
        - ui-spec.md
        - docs/console/component-patterns.md
        - docs/console/coding-conventions.md
      creates: task_id (from @task-manager.createTask)
      action: Use @task-manager.createTask() to create database-backed task
      description: >-
        Create a comprehensive frontend implementation task in the database using @task-manager.
        Include task description with UI specifications and structured todos organized by implementation phases:
        - Component Development phase
        - Styling Implementation phase  
        - Interactive Features phase
        - Responsive Design phase
        - Accessibility Compliance phase
        - Testing & Integration phase
        
        Return task_id for downstream workflow coordination.

handoff_prompts:
  frontend-developer-to-user-story-generator: >-
    I've completed comprehensive frontend analysis using the analyze-frontend command. The analysis reveals:

    **Frontend Architecture Patterns:**
    {frontend_architecture_summary}

    **Component System:**
    {component_system_summary}

    **Styling Patterns:**
    {styling_patterns_summary}

    **Design System Usage:**
    {design_system_summary}

    **Accessibility Standards:**
    {accessibility_standards}

    Generated: `frontend-patterns.md` with complete frontend pattern analysis including:
    - shadcn/ui component patterns with Radix primitives
    - Tailwind CSS utility patterns and custom component classes
    - Responsive design breakpoints and mobile-first approaches
    - Animation and interaction patterns
    - Accessibility implementations (ARIA, semantic HTML)
    - Design token usage and theme system integration

    Please proceed with UI-focused user story generation, ensuring stories emphasize visual outcomes,
    interaction requirements, and frontend user experience goals.

  user-story-generator-to-ui-ux-specialist: >-
    I've analyzed the UI-focused backlog tasks and generated frontend-specific user stories:
    {ui_user_stories_summary}

    **Frontend Pattern Context:**
    - Component System: shadcn/ui components following project patterns
    - Styling: Tailwind CSS with existing design tokens
    - Desktop Focus: 1920×1080 primary target (mobile later)
    - Basic Interactions: Click, hover, focus states

    Please create simple UI specifications focused on practical desktop implementation:
    1. Basic component requirements (which shadcn/ui components to use)
    2. Simple visual layout (ASCII diagram or basic description)
    3. Desktop styling guidance following project patterns
    4. Essential interactions (click handlers, basic hover states)
    5. Functional requirements rather than pixel-perfect specs
    Keep it simple and implementation-focused. Skip complex responsive and accessibility specs for now.

  ui-ux-specialist-to-task-breakdown-specialist: >-
    I have completed the simple UI design phase for the user stories.
    The UI specification file (`ui-spec.md`) contains practical implementation guidance focused on desktop functionality.

    Generated UI Specs:
    {ui_spec_files_summary}

    **UI Design Highlights:**
    - Basic component requirements with shadcn/ui integration
    - Simple visual layout and structure
    - Desktop styling guidance following project patterns
    - Essential interaction definitions
    - Functional requirements focused on implementation

    **CRITICAL: Use @task-manager.createTask() instead of file operations**

    Your task is to create a comprehensive database-backed implementation task:

    1. **Use @task-manager.createTask()** with:
       - Title: "UI Implementation: {Story Name}"
       - Description: Complete UI specification and implementation requirements
       - Todos: Structured by implementation phases (18-24 todos total)

    2. **Organize todos in logical phases:**
       - Component Development (3-4 todos)
       - Styling Implementation (3-4 todos)
       - Interactive Features (3-4 todos)  
       - Responsive Design (3-4 todos)
       - Accessibility Compliance (3-4 todos)
       - Testing & Integration (3-4 todos)

    3. **Return task_id** for downstream agents and workflows

    4. **No file system operations** - everything goes in the database

  workflow-completion: >-
    UI-Only Backlog processing workflow completed successfully using @task-manager!

    Summary of processed frontend work:
    - Analyzed frontend patterns and component architecture
    - Generated UI-focused user stories with visual acceptance criteria
    - Created comprehensive UI specifications for implementation guidance
    - **Created database-backed task via @task-manager.createTask()**
    - **Generated structured todos organized by implementation phases**
    - **Returned task_id: {task_id} for downstream coordination**

    **Key Benefits of New System:**
    - ✅ Reliable database storage vs fragile file operations
    - ✅ Atomic task operations with transaction safety
    - ✅ Centralized progress tracking across all agents
    - ✅ Auto task completion when all todos finished
    - ✅ Task_id-based coordination instead of file paths

    **Next Steps:**
    - Implementation agents receive task_id: {task_id}
    - Use @task-manager.getTask(task_id) to access todos
    - Progress tracked via @task-manager.completeTodoItem()
    - Task status updates via @task-manager.updateTaskStatus()

    The task is now ready for streamlined frontend implementation with full database backing!