workflow:
  id: ui-logic-ready
  name: UI-Logic Integration Preparation (Frontend Phase 2)
  description: >-
    Prepares UI components for logic integration. Takes completed UI implementations
    and creates integration-ready tasks for connecting business logic to UI components.
    Frontend-focused workflow for Phase 2 implementation that connects existing UI with state management,
    API integration, and event handling without modifying UI presentation.

  triggers:
    - task_type: 'ui-logic'
    - labels:
        [
          'frontend',
          'integration',
          'logic-connection',
          'state-management',
          'api-integration'
        ]
    - keywords:
        ['connect', 'integrate', 'state', 'api-connection', 'event-handling', 'logic-ui']

  agents:
    - frontend-developer
    - user-story-generator
    - task-breakdown-specialist
    - todo-manager

  steps:
    - id: frontend-integration-analysis
      title: Analyze UI Components for Logic Integration Points
      agent: frontend-developer
      requires: protocol-assets/shared/board/01.backlog/*/description.md
      creates: ui-integration-patterns.md
      action: Execute /analyze-frontend-integration command to identify logic connection points
      description: >-
        Analyze existing UI components to understand integration points for logic.
        Focus on state management needs, API connection points, event handlers,
        data flow requirements, and existing component interfaces that need logic connections.

    - id: integration-story-generation
      title: Generate UI-Logic Integration User Stories
      agent: user-story-generator
      requires:
        - protocol-assets/shared/board/01.backlog/*/description.md
        - ui-integration-patterns.md
      creates: ui-logic-user-stories
      description: >-
        Generate user stories focused on connecting existing UI with logic.
        Emphasize state management integration, API data connections, event handling,
        loading states, error boundaries, and seamless user experience with backend data.

    - id: integration-specification
      title: Create UI-Logic Integration Specifications
      agent: frontend-developer
      requires:
        - ui-logic-user-stories
        - ui-integration-patterns.md
      creates: protocol-assets/shared/board/02.ready/[task-number]/ui-logic-spec.md
      moves: protocol-assets/shared/board/01.backlog/[task-number] → protocol-assets/shared/board/02.ready/[task-number]
      action: MOVE from protocol-assets/shared/board/01.backlog to protocol-assets/shared/board/02.ready (removes original)
      description: >-
        Create integration specifications for connecting UI components to logic.
        Include state management patterns, API integration points, event handling strategies,
        error boundaries, loading states, and data flow documentation. Focus on maintaining
        existing UI while adding logic connections.

    - id: integration-task-breakdown
      title: Break Down Integration into Implementation Tasks
      agent: task-breakdown-specialist
      requires:
        - ui-logic-user-stories
        - ui-integration-patterns.md
        - protocol-assets/shared/board/02.ready/[task-number]/ui-logic-spec.md
        - docs/console/component-patterns.md
        - docs/console/coding-conventions.md
      creates: protocol-assets/shared/board/02.ready/[task-number] folder with UI-Logic integration task
      structure: |
        protocol-assets/shared/board/02.ready/task-N/
        ├── description.md (original)
        ├── ui-logic-spec.md (integration specifications)
        ├── ui-integration-patterns.md (analysis)
        └── ui-logic-task-1/ (frontend logic integration)
            ├── description.md
            └── todos.md (integration implementation phases)

    - id: integration-todo-generation
      title: Generate UI-Logic Integration Todos
      agent: todo-manager
      requires:
        - protocol-assets/shared/board/02.ready/[task-number]/ui-logic-task-*/description.md files
        - protocol-assets/shared/board/02.ready/[task-number]/ui-logic-spec.md
        - protocol-assets/shared/board/02.ready/[task-number]/ui-integration-patterns.md
        - docs/console/component-patterns.md
      creates: todos.md file in ui-logic-task folder

handoff_prompts:
  frontend-developer-to-user-story-generator: >-
    I've completed comprehensive frontend integration analysis. The analysis reveals:

    **UI Integration Points:**
    {ui_integration_points_summary}

    **Component Interface Analysis:**
    {component_interfaces_summary}

    **State Management Requirements:**
    {state_management_summary}

    **API Integration Points:**
    {api_integration_summary}

    **Event Handling Requirements:**
    {event_handling_summary}

    Generated: `ui-integration-patterns.md` with complete integration analysis including:
    - Existing UI component interfaces ready for logic connection
    - State management integration points (Context, Redux, Zustand)
    - API data flow and connection patterns
    - Event handler integration opportunities
    - Loading states and error boundary requirements

    Please proceed with UI-logic integration story generation, ensuring stories focus on connecting
    existing UI components with business logic while maintaining UI presentation integrity.

  user-story-generator-to-frontend-developer: >-
    I've analyzed the UI-logic integration requirements and generated frontend integration stories:
    {ui_logic_user_stories_summary}

    **Frontend Integration Context:**
    - UI Components: Already implemented and ready for logic connection
    - State Management: Identify patterns for React Context, Redux, or Zustand
    - API Integration: Connect data fetching to existing UI data displays
    - Event Handling: Connect user interactions to business logic
    - Error Handling: Implement error boundaries and loading states

    Please create comprehensive UI-logic integration specifications that focus on:
    1. State management integration patterns
    2. API data connection strategies
    3. Event handler implementation plans
    4. Loading state and error boundary specifications
    5. Data flow documentation between UI and logic layers
    6. Performance considerations for logic integration

  frontend-developer-to-task-breakdown-specialist: >-
    I have completed the UI-logic integration specifications for connecting existing UI with business logic.
    The integration specification file (`ui-logic-spec.md`) contains complete logic connection designs.

    Generated Integration Specs:
    {ui_logic_spec_files_summary}

    **Integration Architecture Highlights:**
    - State management integration patterns with existing UI components
    - API connection strategies for data fetching and caching
    - Event handler implementation plans for user interactions
    - Loading state and error boundary integration
    - Data flow specifications between UI and logic layers

    Your task is to break down these integration specifications into FRONTEND LOGIC CONNECTION tasks.
    Focus on creating a single comprehensive task that covers:

    INTEGRATION TASK BREAKDOWN REQUIREMENTS:
    1. Tasks are already in `protocol-assets/shared/board/02.ready`
    2. Create a single task folder:
       - `ui-logic-task-N/` for complete UI-logic integration (state management, API connections, event handling)
    3. The task should connect logic to existing UI without modifying presentation
    4. Follow established frontend patterns and integration best practices
    5. Ensure the task covers all integration concerns efficiently
    6. Include comprehensive implementation details for state management, API integration, and event handling

  task-breakdown-specialist-to-todo-manager: >-
    I've successfully broken down the UI-logic integration specifications into a frontend integration task.
    The task folder has been organized in `protocol-assets/shared/board/02.ready` with focused integration structure.

    Created integration task structure in protocol-assets/shared/board/02.ready:
    {ui_logic_task_files_list}

    Please analyze the UI-logic integration task description file and create a comprehensive `todos.md` file.
    Generate actionable integration todos organized by implementation phases:
    1. **State Management Integration**: Connect existing UI components with state management solutions
    2. **API Data Connections**: Implement data fetching and connect to UI data displays
    3. **Event Handler Implementation**: Connect user interactions to business logic
    4. **Loading States and Error Boundaries**: Implement user feedback for async operations
    5. **Integration Testing**: Validate UI-logic connections work seamlessly

    All todos should focus on connecting logic to existing UI components without modifying presentation,
    organized for efficient frontend integration workflow execution.

  workflow-completion: >-
    UI-Logic Integration preparation workflow completed successfully!

    Summary of processed frontend integration work:
    - Analyzed existing UI components for logic integration points
    - Generated UI-logic integration user stories with connection requirements
    - Created comprehensive `ui-logic-spec.md` files with integration specifications
    - Moved task folders to `protocol-assets/shared/board/02.ready`
    - Created UI-logic integration task folder with comprehensive implementation todos
    - Generated organized `todos.md` file covering all frontend integration phases

    All tasks are now ready for Phase 2 frontend implementation - connecting business logic
    to existing UI components while maintaining presentation integrity.