---
description: Master orchestrator for pre-development workflow with revolving gates
globs: 
alwaysApply: false
---
# Rule: Pre-Development Workflow Orchestration (Revolving Cycle Pattern)

## Goal

To guide development from business idea to atomic implementation units through a systematic, gated workflow that ensures quality at each phase transition. All 5 gates are mandatory validation checkpoints - each gate validates outputs before allowing progression, creating a revolving cycle of continuous improvement.

## 🔄 The Revolving Cycle Architecture

### 5 Mandatory Gates

This workflow enforces **5 mandatory validation gates**:
1. **Gate 1** - Business Validation (after PRD)
2. **Gate 2** - Technical Feasibility (after TRD)
3. **Gate 3** - Stack Validation (after Dependency Map)
4. **Gate 4** - Implementation Readiness (after Tasks)
5. **Gate 5** - Deployment Readiness (after Subtasks)

Each gate must pass before proceeding to the next phase. This ensures quality and prevents cascade failures.

```
┌─────────────────────┐
│  REVOLVING CYCLE    │ ← Continuous learning feeds back
└──────────┬──────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │     PRD     │───────►│   GATE 1   │ Business Validation
    │  (What/Why) │◄───────│  Complete? │ What problems solved?
    └──────┬──────┘        └────────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │     TRD     │───────►│   GATE 2   │ Technical Feasibility
    │  (How/Where)│◄───────│  Feasible? │ Can we build this?
    └──────┬──────┘        └────────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │ DEPENDENCY  │───────►│   GATE 3   │ Stack Validation
    │     MAP     │◄───────│Compatible? │ Dependencies work?
    └──────┬──────┘        └────────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │    TASKS    │───────►│   GATE 4   │ Implementation Ready
    │ (Macro Units)│◄───────│  Atomic?  │ Can teams execute?
    └──────┬──────┘        └────────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │   SUBTASKS  │───────►│   GATE 5   │ Deployment Ready
    │   (Atomic)  │◄───────│Deployable? │ Zero context needed?
    └──────┬──────┘        └────────────┘
           │
           └────────────────────┘ Patterns stored in Memory MCP
```

## Phase Definitions & Gates

### 📋 Phase 1: PRD (Product Requirements Document)
**Focus**: WHAT are we building and WHY does it matter?
- Business problem definition
- User needs and personas
- Success metrics
- Feature requirements (functional)
- User stories and journeys
- Market/competitive context

**NOT in PRD**: Technical implementation, architecture, dependencies, how to build

**Gate 1 - Business Validation**:
```yaml
Validation Criteria:
  - [ ] Clear problem statement exists
  - [ ] Target users are well-defined
  - [ ] Success metrics are measurable
  - [ ] All features have user value
  - [ ] Scope boundaries are explicit
  - [ ] Business ROI is justified
```

### 🔧 Phase 2: TRD (Technical Requirements Document)
**Focus**: HOW will we build it and WHERE will components live?
- System architecture design
- Component breakdown
- API contracts
- Data models and schemas
- Security approach
- Performance requirements

**NOT in TRD**: Specific packages, infrastructure choices, implementation details

**Gate 2 - Technical Feasibility**:
```yaml
Validation Criteria:
  - [ ] Architecture supports all PRD requirements
  - [ ] Component interfaces are defined
  - [ ] Data flow is clear and complete
  - [ ] Security model addresses all risks
  - [ ] Performance targets are achievable
  - [ ] Integration points are identified
```

### 🗺️ Phase 3: Dependency Map
**Focus**: WHAT specific technologies and infrastructure?
- Language and framework choices
- Package dependencies with versions
- Infrastructure requirements
- External service integrations
- Development tool requirements
- Deployment environment specs

**NOT in Dependency Map**: Implementation logic, business rules, feature details

**Gate 3 - Stack Validation**:
```yaml
Validation Criteria:
  - [ ] All dependencies are compatible
  - [ ] No conflicting version requirements
  - [ ] Security vulnerabilities checked
  - [ ] License compliance verified
  - [ ] Infrastructure costs acceptable
  - [ ] Team has required expertise
```

### 📦 Phase 4: Tasks (Macro Implementation Units)
**Focus**: WHAT are the major implementation chunks?
- Feature-based task breakdown
- Clear deliverables per task
- Dependency ordering
- Acceptance criteria
- Estimated effort (T-shirt sizes)
- Testing requirements

**NOT in Tasks**: Code details, specific implementations, micro-steps

**Gate 4 - Implementation Readiness**:
```yaml
Validation Criteria:
  - [ ] Each task has clear boundaries
  - [ ] Dependencies are properly ordered
  - [ ] Acceptance criteria are testable
  - [ ] No task exceeds team capacity
  - [ ] All PRD features are covered
  - [ ] Risk mitigation is planned
```

### ⚛️ Phase 5: Atomic Subtasks
**Focus**: HOW to implement with minimal context?
- Self-contained work units
- Zero-assumption instructions
- Specific file changes
- Test requirements
- Code examples/patterns
- Deployment steps

**NOT in Subtasks**: Business context, architectural decisions, why explanations

**Gate 5 - Deployment Readiness**:
```yaml
Validation Criteria:
  - [ ] Each subtask is truly atomic
  - [ ] No external context required
  - [ ] Clear success criteria exists
  - [ ] Can be completed in <4 hours
  - [ ] Includes verification steps
  - [ ] Rollback plan included
```

## 🧠 Enhanced Tool Integration

### Memory MCP Usage Pattern
```yaml
Each Phase:
  Start: 
    - Retrieve similar patterns
    - Load previous decisions
    - Check for constraints
  
  During:
    - Store key decisions
    - Track confidence scores
    - Note uncertainties
  
  End:
    - Save validated outputs
    - Store gate decisions
    - Record learnings
```

### Sequential Thinking MCP
- Use for complex breakdowns at each phase
- Especially valuable for PRD→TRD and Tasks→Subtasks transitions
- Helps identify hidden dependencies and edge cases

### Zen MCP Tools
- `thinkdeep`: For architectural decisions in TRD
- `analyze`: For dependency compatibility checks
- `planner`: For task breakdown and ordering

## Confidence-Based Autonomy

### High Confidence (80%+)
- Found exact patterns in memory
- Clear requirements with precedent
- Proceed autonomously, notify user

### Medium Confidence (50-79%)
- Partial patterns found
- Some ambiguity exists
- Present options for user selection

### Low Confidence (<50%)
- Novel requirements
- High uncertainty
- Request specific guidance

## Quick Start Commands

```bash
# Start new product development
claude 1-pre-dev-product/1-create-prd.mdc

# After PRD approval (Gate 1 passed)
claude 1-pre-dev-product/2-create-trd.mdc

# After TRD approval (Gate 2 passed)
claude 1-pre-dev-product/3-create-dependency-map.mdc

# After Dependency validation (Gate 3 passed)
claude 1-pre-dev-product/4-create-tasks.mdc

# After Task approval (Gate 4 passed)
claude 1-pre-dev-product/5-create-subtasks.mdc
```

## Output Organization

```
docs/pre-development/
├── prd/
│   └── prd-[feature-name].md
├── trd/
│   └── trd-[feature-name].md
├── dependencies/
│   └── dep-map-[feature-name].md
├── tasks/
│   └── tasks-[feature-name].md
└── subtasks/
    └── T-[task-id]/
        ├── ST-[task-id]-01-[description].md
        ├── ST-[task-id]-02-[description].md
        └── ST-[task-id]-03-[description].md
```

## Gate Failure Learning Loop

When any gate fails:
1. Document specific failure reasons
2. Store in Memory MCP with tags
3. Suggest remediation options
4. Update phase to address issues
5. Re-attempt gate validation

This creates a revolving cycle where each failure improves future attempts.

## Success Metrics

- **Gate Pass Rate**: Target >85% first attempt
- **Revision Cycles**: <2 per phase
- **Pattern Reuse**: >60% from memory
- **Time to Implementation**: 40% faster than traditional
- **Context Switches**: Minimized through atomic design