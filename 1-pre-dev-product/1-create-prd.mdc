---
description: Generate Product Requirements Document focusing on WHAT and WHY
globs: 
alwaysApply: false
---
# Rule: Creating a Product Requirements Document (PRD)

## Goal

To capture the business vision, user needs, and feature requirements without technical implementation details. The PRD answers WHAT we're building and WHY it matters to users and the business.

## 🧠 Enhanced Analysis Tools

### Memory MCP Integration
```yaml
Operations:
  - Search: Find similar products/features built before
  - Store: Save user research, decisions, requirements
  - Retrieve: Get market insights, user feedback patterns
  
Tags: ["prd", "requirements", "user-needs", "business-case", "feature-name"]
```

### Sequential Thinking MCP
```yaml
Use For:
  - Breaking down vague user requests
  - Exploring problem space systematically
  - Identifying hidden user needs
  - Mapping user journeys

Pattern: Problem → Users → Needs → Features → Value
```

### Zen MCP Tools
- **chat**: Brainstorm feature ideas and user scenarios
- **thinkdeep**: Explore problem space and user psychology
- **analyze**: Competitive analysis and market positioning

## Process: Business-First Discovery

### Phase 1: Problem Discovery
```yaml
Parallel Actions:
  1. Memory Search:
     - Similar problems solved
     - User feedback patterns
     - Market analysis data
  
  2. User Analysis:
     - Who has this problem?
     - How painful is it?
     - Current workarounds?
  
  3. Business Context:
     - Market opportunity
     - Competitive landscape
     - Strategic alignment
```

### Phase 2: Requirement Definition
Based on confidence from Phase 1:
- **High Confidence (80%+)**: Generate complete PRD from patterns
- **Medium (50-79%)**: Present problem/solution options
- **Low (<50%)**: Deep discovery questions

### Phase 3: Validation & Gate 1

## PRD Structure (Business-Focused)

### 1. Executive Summary
- Problem statement (1-2 sentences)
- Proposed solution (1-2 sentences)
- Expected impact (metrics)

### 2. Problem Definition
- **Current State**: How things work today
- **Pain Points**: Specific user frustrations
- **Opportunity**: Why solve this now?

### 3. User Personas
```markdown
**Primary Persona: [Name]**
- Demographics: Age, role, experience
- Goals: What they want to achieve
- Frustrations: Current pain points
- Quote: "I wish I could..."
```

### 4. User Stories
Format: "As a [persona], I want to [action] so that [benefit]"
- Group by persona
- Prioritize by value/effort
- Include acceptance criteria

### 5. Feature Requirements
```markdown
**FR-001: [Feature Name]**
- Description: What it does (not how)
- User Value: Why users need this
- Success Criteria: How we measure success
- Priority: Must-have / Should-have / Nice-to-have
```

### 6. User Journey Maps
```
Current Journey:
1. User tries to [goal]
2. User encounters [problem]
3. User works around by [current solution]
4. User feels [emotion]

Proposed Journey:
1. User wants to [goal]
2. User uses [feature]
3. User achieves [outcome]
4. User feels [positive emotion]
```

### 7. Success Metrics
- **User Metrics**: Adoption, satisfaction, task completion
- **Business Metrics**: Revenue, cost savings, market share
- **Leading Indicators**: Early signals of success

### 8. Scope & Constraints
- **In Scope**: What we WILL deliver
- **Out of Scope**: What we WON'T deliver (and why)
- **Assumptions**: What we believe to be true
- **Constraints**: Budget, timeline, resources

### 9. Risks & Mitigations
```markdown
**Risk: [Description]**
- Impact: High/Medium/Low
- Probability: High/Medium/Low
- Mitigation: How we'll address it
- Owner: Who's responsible
```

### 10. Go-to-Market Considerations
- Target audience segments
- Value proposition
- Differentiation
- Launch strategy outline

## What NOT to Include in PRD

❌ **Technical Details**:
- Architecture diagrams
- Technology choices
- Implementation approaches
- Database schemas
- API specifications

❌ **Implementation Specifics**:
- Code examples
- Package dependencies
- Infrastructure needs
- Deployment strategies

❌ **How-to-Build**:
- Component design
- Integration patterns
- Technical workflows
- System dependencies

## Confidence Scoring

```yaml
Component: "[Feature/Section]"
Confidence Factors:
  Market Validation: [0-25]
    - Direct user feedback: 25
    - Market research: 15
    - Assumptions: 5
  
  Problem Clarity: [0-25]
    - Quantified pain: 25
    - Qualitative only: 15
    - Hypothetical: 5
  
  Solution Fit: [0-25]
    - Proven pattern: 25
    - Adjacent pattern: 15
    - Novel approach: 5
  
  Business Value: [0-25]
    - Clear ROI: 25
    - Indirect value: 15
    - Uncertain: 5

Total: [0-100]
Action:
  80+: Proceed with PRD
  50-79: Validate assumptions
  <50: More discovery needed
```

## User Interaction Model

### High-Confidence Path (80%+)
```markdown
"Based on similar successful products, I've drafted a PRD that addresses [problem] for [users]. 

Key insights from memory:
- Pattern: [Similar product] achieved [result]
- Users typically need [key features]
- Success metric: [specific metric]

Proceeding with PRD generation..."
```

### Medium-Confidence Path (50-79%)
```markdown
"I've identified several approaches to [problem]:

Option A: Focus on [aspect] for [user group]
- Pros: [benefits]
- Similar to: [example]

Option B: Broader solution for [multiple groups]
- Pros: [benefits]
- Trade-offs: [considerations]

Which direction aligns with your vision?"
```

### Low-Confidence Path (<50%)
```markdown
"To create an effective PRD, I need to understand:

1. **Users**: Who specifically has this problem?
2. **Pain**: How are they measuring the impact?
3. **Value**: What would success look like?
4. **Scope**: What's the minimum valuable solution?

Let's explore these together..."
```

## Gate 1: Business Validation

Before proceeding to TRD:

```yaml
Gate 1 Checklist:
  Problem Definition:
    - [ ] Problem is clearly articulated
    - [ ] Impact is quantified/qualified
    - [ ] Users are specifically identified
  
  Solution Value:
    - [ ] Features address core problem
    - [ ] Success metrics are measurable
    - [ ] ROI case is reasonable
  
  Scope Clarity:
    - [ ] In/out of scope is explicit
    - [ ] Dependencies are identified
    - [ ] Timeline expectations set
  
  Market Fit:
    - [ ] Differentiation is clear
    - [ ] User value is validated
    - [ ] Business case is sound

Gate Actions:
  PASS: Proceed to TRD
  CONDITIONAL: Address gaps first
  FAIL: Return to discovery
```

## Output

**Location**: `/docs/pre-development/prd/prd-[feature-name].md`

## Next Steps

After Gate 1 approval:
1. PRD becomes locked reference
2. Proceed to TRD (technical how)
3. No implementation details in PRD
4. Keep business/technical separated

## Quality Checklist

- [ ] No technical implementation details
- [ ] User needs clearly articulated  
- [ ] Success metrics are measurable
- [ ] Scope boundaries are explicit
- [ ] Business value is justified
- [ ] User journeys are complete
- [ ] Risks are identified
- [ ] Gate 1 criteria met