---
description: Validation step to ensure PRD/TRD/Tasks consistency before proceeding
globs: 
alwaysApply: false
---
# Rule: Final Validation & Optimization (Dynamic Workflow)

## üß† Enhanced Analysis Tools - USE THESE!

**CRITICAL:** Leverage these tools throughout the validation process:

### üß© Memory MCP Integration
- **Retrieve decisions:** `memory_search` for PRD, TRD, and task decisions to cross-validate
- **Store validation patterns:** `memory_store_chunk` with common consistency issues found
- **Reference validation history:** `memory_search` for similar validation scenarios and outcomes
- **Track validation workflow:** `memory_tasks` for validation process management
- **Tags to use:** `["validation", "consistency", "chain-verification", "feature-name"]`

### üîÑ Sequential Thinking MCP
- **Use for:** Complex cross-document analysis, inconsistency detection, completeness validation
- **Pattern:** PRD requirements ‚Üí TRD technical specs ‚Üí Task implementation ‚Üí consistency check
- **Benefit:** Systematic validation ensures no requirements are lost in translation
- **When:** During cross-reference analysis and completeness validation

### ü§ñ Zen MCP Integration (HIGHLY RECOMMENDED)
**Why Use Zen MCP:**
- **Cross-Document Analysis**: Use `mcp__zen__analyze` for validating consistency across PRD/TRD/Tasks
- **Risk Assessment**: Use `mcp__zen__thinkdeep` to identify potential implementation risks
- **Quality Validation**: Use `mcp__zen__codereview` to assess technical completeness
- **Architecture Validation**: Use `mcp__zen__chat` to verify architectural alignment

**Example Usage:**
```
mcp__zen__analyze
  files=["docs/pre-development/prd-[feature].md", "docs/pre-development/trd-[feature].md", "docs/pre-development/tasks/tasks-[feature].md"]
  prompt="Validate requirements traceability and consistency across all documents"
  model="pro"
  analysis_type="architecture"
```

### üîç Task Tool Usage (USE LIBERALLY)
**When to Use Task():**
- Finding validation patterns from previous projects
- Searching for common consistency issues
- Discovering risk mitigation strategies
- Parallel validation of multiple aspects

**Example:**
```
Task
  description="Find validation patterns"
  prompt="Search for previous validation reports, consistency checks, and common issues found during chain validation"
```

**Pro tip:** Store validation patterns to improve future validation accuracy and speed!

## Goal

To serve as the **Final Checkpoint** in the pre-development workflow. This prompt performs comprehensive validation autonomously and presents a single approval point for the user to proceed to implementation.

## Process - Autonomous Validation with Single Checkpoint

### Phase 1: Parallel Validation (AI-Driven)

1. **Comprehensive Document Analysis:**
   ```yaml
   Parallel Validation:
     - Requirements traceability mapping
     - Architecture consistency check
     - Technical completeness audit
     - Task coverage analysis
     - Risk identification
   ```
   
   üß© **Memory Actions:**
   ```
   # Retrieve all decisions and patterns
   mcp__lerian-memory__memory_read
     operation="search"
     options={
       "query": "validation patterns consistency issues",
       "repository": "github.com/[org]/[repo]"
     }
   ```

2. **Autonomous Issue Resolution:**
   - For minor inconsistencies: Auto-correct and document
   - For medium issues: Generate resolution options
   - For critical issues: Flag for user attention
   
   üîÑ **Sequential Thinking:**
   ```
   mcp__sequential-thinking__sequentialthinking
     thought="Validating PRD‚ÜíTRD‚ÜíTasks chain: checking requirement coverage, technical alignment, implementation readiness"
     nextThoughtNeeded=true
     thoughtNumber=1
     totalThoughts=4
   ```

3. **Optimization Pass:**
   - Identify redundancies across documents
   - Suggest task consolidations
   - Optimize dependency chains
   - Generate implementation roadmap

### Phase 2: Final Approval Checkpoint (User Interaction)

**Present Executive Validation Package:**

```markdown
## üéØ Final Pre-Development Approval

### Validation Summary
‚úÖ **Requirements Coverage**: 100% (all PRD requirements mapped)
‚úÖ **Technical Alignment**: 98% (minor naming inconsistency auto-corrected)
‚úÖ **Task Completeness**: 100% (15 atomic tasks validated)
‚ö†Ô∏è **Risk Identified**: Legacy system integration complexity

### Optimization Opportunities
- Tasks MT-003 and MT-004 can be combined (saves 2 days)
- Parallel execution possible for MT-007 and MT-008
- Total timeline: 3 weeks (optimized from 4 weeks)

### Implementation Roadmap
Week 1: Foundation (MT-001 to MT-003)
Week 2: Core Features (MT-004 to MT-008)
Week 3: Integration & Polish (MT-009 to MT-015)

### Critical Decision Required
‚ö†Ô∏è **Legacy System Risk**: No established pattern for legacy API integration

Options:
1. Proceed with research spike in MT-008 (adds 2 days)
2. Defer legacy integration to Phase 2
3. Use adapter pattern from similar project (70% confidence)

### Ready to Proceed?
All documents validated and optimized. Type 'proceed' to begin implementation or 'review' to see detailed report.
```

### Phase 3: Post-Approval Actions (Autonomous)

Once user approves:
1. Generate optimized implementation checklist
2. Create sprint-ready task breakdowns
3. Store all validation patterns
4. Export implementation roadmap

## Required Input Documents

### Document Locations
- **PRD:** `/docs/pre-development/prd-[feature-name].md`
- **TRD:** `/docs/pre-development/trd-[feature-name].md`
- **Main Tasks:** `/docs/pre-development/tasks/main-tasks-[feature-name].md`
- **Sub-Tasks:** `/docs/pre-development/tasks/MT-*/` (if generated)

### Validation Prerequisites
Before running validation, ensure:
- [ ] PRD is complete and approved
- [ ] TRD references PRD and adds technical specifications
- [ ] Main tasks are generated and atomic
- [ ] All documents follow chain progression

## Validation Categories

### 1. Requirements Traceability Matrix

**Objective:** Ensure every PRD requirement is addressed in TRD and tasks.

**Validation Steps:**
- Extract all numbered requirements from PRD Section 5 (Functional Requirements)
- Map each requirement to corresponding TRD sections
- Verify each requirement is covered by main tasks
- Identify orphaned or missing requirements

**Output Format:**
```markdown
| PRD Req ID | Requirement | TRD Section | Main Task | Status |
|------------|-------------|-------------|-----------|---------|
| FR-001 | User authentication | 8.1 | MT-001 | ‚úÖ Covered |
| FR-002 | Task creation | 6.2 | MT-002 | ‚úÖ Covered |
| FR-003 | Data export | - | - | ‚ùå Missing |
```

### 2. Architecture Consistency Check

**Objective:** Ensure architectural patterns are consistently applied across all documents.

**Validation Points:**
- **Hexagonal Architecture:** Verify TRD implements PRD architecture requirements
- **Component Structure:** Check TRD components match PRD architectural vision
- **Data Flow:** Ensure data modeling consistency between PRD and TRD
- **API Design:** Verify TRD API specs implement PRD API modeling
- **lib-commons Integration:** Confirm lib-commons usage is specified throughout
- **lib-auth Integration:** Validate authentication patterns align with lib-auth

**Architecture Validation Checklist:**
- [ ] TRD System Architecture (Section 2) reflects PRD Architecture Patterns (Section 16)
- [ ] TRD Component Design (Section 6) follows Hexagonal Architecture principles
- [ ] TRD API Specifications (Section 5) implement PRD API Modeling (Section 11)
- [ ] TRD Data Architecture (Section 4) aligns with PRD Data Modeling (Section 10)
- [ ] lib-commons integration specified in TRD Development Standards (Section 11)
- [ ] lib-auth patterns defined in TRD Security Architecture (Section 8)

### 3. Technical Specification Completeness

**Objective:** Ensure TRD provides sufficient technical detail for implementation.

**Validation Areas:**
- **Database Schema:** Complete DDL with indexes and constraints
- **API Endpoints:** Full OpenAPI specifications for all PRD API requirements
- **Component Interfaces:** Clear interfaces between system components
- **Security Implementation:** Detailed security measures for each requirement
- **Performance Specifications:** Measurable performance targets
- **Testing Strategy:** Comprehensive testing approach for all components

### 4. Task Breakdown Validation

**Objective:** Ensure main tasks are atomic, complete, and deliverable.

**Atomic Task Verification:**
- [ ] Each main task delivers working software
- [ ] All PRD phases represented in main tasks
- [ ] Dependencies are logical and minimal
- [ ] Acceptance criteria are measurable
- [ ] Testing requirements are complete

**Task Coverage Analysis:**
- Map PRD Development Roadmap (Section 13) to main tasks
- Verify TRD Implementation Roadmap (Section 16) aligns with main tasks
- Ensure all technical components from TRD are covered
- Validate user stories are addressed across tasks

### 5. Development Chain Continuity

**Objective:** Ensure smooth progression from business requirements to implementation.

**Chain Validation Points:**
- **PRD ‚Üí TRD:** All business requirements have technical specifications
- **TRD ‚Üí Tasks:** All technical components are planned for implementation
- **Tasks ‚Üí Implementation:** All tasks are implementable with provided specifications
- **Architecture Enforcement:** Patterns are consistently referenced throughout

## User Interaction Model - Single Decision Point

### The Final Gateway

This validation represents the **LAST checkpoint** before implementation begins.

### Interaction Principles
1. **Executive Summary Only**: Present actionable insights, not detailed analysis
2. **Risk-Focused**: Highlight only critical decisions needed
3. **Optimization Value**: Show time/effort savings clearly
4. **Binary Decision**: Simple proceed/review choice

### Dynamic Presentation Based on Validation Results

**Scenario 1: All Green (95%+ validation)**
```markdown
## ‚úÖ Ready for Implementation

All documents validated successfully. No critical issues found.

**Quick Stats:**
- 15 atomic tasks ready
- 3-week timeline
- First deliverable: Day 2

Type 'proceed' to start implementation.
```

**Scenario 2: Minor Issues (85-94% validation)**
```markdown
## üü° Minor Adjustments Applied

**Auto-corrected:**
- Naming inconsistencies (3 instances)
- Task dependency optimization (saved 2 days)

**Timeline Impact:** None (absorbed in buffer)

Type 'proceed' to start or 'review' for details.
```

**Scenario 3: Critical Decision Needed (<85% validation)**
```markdown
## üî¥ Strategic Decision Required

**Blocking Issue:** [Specific issue]

**Your Options:**
1. [Option with impact]
2. [Option with impact]

Please select (1/2) or type 'review' for full analysis.
```

## Validation Report Structure - Optimized Format

### Executive Package (What User Sees)
```markdown
# Implementation Readiness Report

## Status: [READY/NEEDS_DECISION/BLOCKED]

### Scorecard
| Aspect | Score | Status |
|--------|-------|--------|
| Requirements | 100% | ‚úÖ |
| Technical | 98% | ‚úÖ |
| Tasks | 100% | ‚úÖ |
| Risks | 85% | ‚ö†Ô∏è |

### Key Findings
- [Finding 1 with impact]
- [Finding 2 with resolution]
- [Risk with mitigation]

### Optimizations Applied
- [Optimization 1: saved X days]
- [Optimization 2: reduced complexity]

### Next Steps
[Specific action required or "Ready to implement"]
```

### Detailed Report (Available on Request)
Generated but only shown if user types 'review':

1. **Requirements Traceability Matrix**
2. **Technical Alignment Details**
3. **Task Dependency Graph**
4. **Risk Analysis Deep Dive**
5. **Optimization Rationale**
6. **Implementation Guidelines**

## Critical Validation Rules

### Blocking Issues (Must Fix Before Implementation)
- **Missing Requirements:** Any PRD requirement not addressed in TRD or tasks
- **Architecture Violations:** TRD not following PRD architecture patterns
- **Non-Atomic Tasks:** Main tasks that don't deliver working software
- **Missing Dependencies:** Unresolved external or internal dependencies
- **Incomplete Specifications:** TRD sections without sufficient implementation detail

### Warning Issues (Should Fix Before Implementation)
- **Inconsistent Naming:** Different terminology across documents
- **Performance Gaps:** Missing performance specifications
- **Testing Gaps:** Incomplete testing strategies
- **Documentation Gaps:** Missing documentation requirements
- **lib-commons/lib-auth Gaps:** Insufficient integration specifications

## Architecture Pattern Enforcement

### Hexagonal Architecture Validation
Ensure TRD includes:
- [ ] Domain layer isolation (no external dependencies)
- [ ] Port interfaces for all external interactions
- [ ] Adapter implementations clearly separated
- [ ] Dependency injection configuration
- [ ] Testing strategy for domain logic isolation

### lib-commons Integration Validation
Verify TRD specifies:
- [ ] lib-commons version and components used
- [ ] Error handling integration with lib-commons patterns
- [ ] Validation utilities usage
- [ ] Database utilities integration
- [ ] Observability integration (logging, metrics, tracing)
- [ ] Configuration management integration

### lib-auth Integration Validation (for Midaz projects)
Confirm TRD includes:
- [ ] lib-auth version and authentication flows
- [ ] JWT validation integration
- [ ] RBAC utilities usage
- [ ] Security headers configuration
- [ ] Authorization middleware integration

## Output Format

### Validation Report File
- **Location:** `/docs/pre-development/validation-report-[feature-name].md`
- **Format:** Markdown with clear pass/fail indicators
- **Status Indicators:**
  - ‚úÖ PASS - Requirement fully satisfied
  - ‚ö†Ô∏è WARNING - Issue identified but not blocking
  - ‚ùå FAIL - Critical issue that blocks implementation
  - üîÑ NEEDS_REVIEW - Requires human review/decision

### Validation Summary
Include a summary table at the top of the report:

```markdown
# Validation Summary

| Category | Status | Issues | Warnings | Notes |
|----------|--------|--------|----------|-------|
| Requirements Traceability | ‚úÖ PASS | 0 | 2 | All requirements covered |
| Architecture Consistency | ‚ùå FAIL | 1 | 0 | Missing lib-commons integration |
| Technical Completeness | ‚ö†Ô∏è WARNING | 0 | 3 | API specs need detail |
| Task Breakdown | ‚úÖ PASS | 0 | 1 | All tasks atomic |
| Chain Continuity | ‚úÖ PASS | 0 | 0 | Smooth progression |

**Overall Status: ‚ùå FAIL - 1 critical issue must be resolved**

## Remediation Procedures

### When Validation Fails (‚ùå FAIL Status)

**Immediate Actions:**
1. **STOP Implementation:** Do not proceed to sub-task generation
2. **Document Issues:** Create detailed issue list with specific fixes needed
3. **Assign Ownership:** Determine who will fix each issue (PRD author, TRD author, etc.)
4. **Set Timeline:** Establish deadlines for remediation

**Remediation Process:**
1. **Critical Issues First:** Address blocking issues in priority order
2. **Update Documents:** Make required changes to PRD, TRD, or tasks
3. **Cross-Reference Updates:** Ensure changes don't create new inconsistencies
4. **Re-run Validation:** Complete validation again after fixes
5. **Approval Gate:** Get explicit approval before proceeding

### When Validation Needs Review (‚ö†Ô∏è NEEDS_REVIEW Status)

**Review Process:**
1. **Stakeholder Review:** Present issues to relevant stakeholders
2. **Risk Assessment:** Evaluate impact of proceeding with known issues
3. **Mitigation Planning:** Define how to handle identified risks
4. **Decision Documentation:** Record go/no-go decision with rationale
5. **Conditional Approval:** May proceed with specific monitoring/mitigation

### Remediation Examples

**Missing Requirements:**
- **Issue:** PRD requirement FR-003 not addressed in TRD
- **Fix:** Add technical specification for FR-003 in TRD Section 6
- **Validation:** Re-check requirements traceability matrix

**Architecture Violations:**
- **Issue:** TRD doesn't specify lib-commons integration
- **Fix:** Add lib-commons usage details in TRD Section 11
- **Validation:** Re-check architecture consistency report

**Non-Atomic Tasks:**
- **Issue:** Task T-002 doesn't deliver working software
- **Fix:** Split T-002 into atomic sub-phases or restructure scope
- **Validation:** Re-check atomic task validation criteria
```

## Final Instructions

1. **Read All Documents:** Always validate the complete chain
2. **Be Thorough:** Check every requirement and specification
3. **Flag Inconsistencies:** Don't let small issues pass through
4. **Provide Solutions:** Include specific recommendations for fixes
5. **Block if Necessary:** Don't approve flawed chains for implementation
6. **Update Documents:** Recommend specific document updates needed
7. **Next Step:** Only proceed to sub-task generation after PASS validation
8. **Remediation Required:** If validation fails, follow remediation procedures before continuing
9. **Re-validation:** Always re-run complete validation after any document changes

## Quality Checklist

Before approving the chain for implementation:
- [ ] All PRD requirements traced to TRD and tasks
- [ ] Architecture patterns consistently applied
- [ ] Technical specifications sufficient for implementation
- [ ] Main tasks are atomic and deliverable
- [ ] Dependencies are resolved and minimal
- [ ] lib-commons and lib-auth integration specified
- [ ] Testing strategy is comprehensive
- [ ] Performance requirements are measurable
- [ ] Security requirements are complete
- [ ] Documentation requirements are clear

## Relationship to Development Chain

This validation step sits between main task generation and sub-task creation:

1. **create-prd.mdc** ‚Üí PRD created
2. **create-trd.mdc** ‚Üí TRD created
3. **generate-tasks.mdc** ‚Üí Main tasks created
4. **validate-chain.mdc** ‚Üí Validation performed ‚Üê **YOU ARE HERE**
5. **generate-sub-tasks.mdc** ‚Üí Sub-tasks created (only after PASS validation)
6. **test-strategy.mdc** ‚Üí Test strategy defined

## Next Steps

After successful validation (PASS):
1. **Proceed to Sub-Tasks:** Run `5-generate-sub-tasks.mdc` to create detailed implementation tasks
2. **Then Test Strategy:** Run `6-test-strategy.mdc` to define comprehensive test coverage
3. **Begin Implementation:** With validated documents and clear test strategy

The validation ensures quality and consistency before detailed implementation planning begins.