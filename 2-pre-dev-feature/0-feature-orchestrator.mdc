---
description: Master orchestrator for feature development workflow with revolving gates
globs: 
alwaysApply: false
---
# Rule: Feature Development Workflow Orchestration (Revolving Cycle Pattern)

## Goal

To guide feature additions to existing products through a streamlined, gated workflow optimized for incremental development. All 4 gates are mandatory validation checkpoints - each gate validates outputs before allowing progression, creating a revolving cycle of continuous improvement.

## 🔄 The Revolving Cycle Architecture

### 4 Mandatory Gates

This workflow enforces **4 mandatory validation gates**:
1. **Gate 1** - Feature Validation (after Feature Brief)
2. **Gate 2** - Technical Validation (after Technical Design)
3. **Gate 3** - Implementation Readiness (after Implementation Plan)
4. **Gate 4** - Deployment Readiness (after Subtasks)

Each gate must pass before proceeding to the next phase. This ensures quality and prevents cascade failures.

```
┌─────────────────────┐
│  REVOLVING CYCLE    │ ← Continuous learning feeds back
└──────────┬──────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │   FEATURE   │───────►│   GATE 1   │ Feature Validation
    │    BRIEF    │◄───────│  Complete? │ Does it fit product?
    └──────┬──────┘        └────────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │  TECHNICAL  │───────►│   GATE 2   │ Technical Validation
    │   DESIGN    │◄───────│  Feasible? │ Can we build this?
    └──────┬──────┘        └────────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │IMPLEMENTATION│───────►│   GATE 3   │ Implementation Ready
    │     PLAN     │◄───────│   Ready?   │ Tasks well-defined?
    └──────┬──────┘        └────────────┘
           │
    ┌──────▼──────┐        ┌────────────┐
    │   SUBTASKS  │───────►│   GATE 4   │ Deployment Ready
    │   (Atomic)  │◄───────│Deployable? │ Zero context needed?
    └──────┬──────┘        └────────────┘
           │
           └────────────────────┘ Patterns stored in Memory MCP
```

## Key Differences from Product Workflow

1. **Assumes Existing Context**: Product exists, architecture established, tech stack defined
2. **Streamlined Phases**: 4 phases instead of 5 (no separate dependency map)
3. **Faster Execution**: Leverages existing patterns and infrastructure
4. **Integration Focus**: Emphasizes fitting into existing system

## Phase Definitions & Gates

### 📋 Phase 1: Feature Brief
**Focus**: WHAT feature are we adding and WHY does it matter?
- Feature description and scope
- User value proposition
- Integration with existing features
- Success metrics
- Impact on current users

**NOT in Feature Brief**: Technical implementation, architecture changes, dependency updates

**Gate 1 - Feature Validation**:
```yaml
Validation Criteria:
  - [ ] Feature aligns with product vision
  - [ ] User value is clearly defined
  - [ ] Scope boundaries are explicit
  - [ ] Success metrics are measurable
  - [ ] Impact on existing features assessed
  - [ ] Business ROI is justified
```

### 🔧 Phase 2: Technical Design
**Focus**: HOW will we integrate this feature?
- Integration points with existing system
- Required component changes
- API modifications/additions
- Data model updates
- Security considerations
- Performance impact

**NOT in Technical Design**: Specific packages, detailed implementation steps

**Gate 2 - Technical Validation**:
```yaml
Validation Criteria:
  - [ ] Integration approach is sound
  - [ ] No breaking changes (or migration plan exists)
  - [ ] Performance impact acceptable
  - [ ] Security model maintained
  - [ ] Data consistency preserved
  - [ ] Backwards compatibility ensured
```

### 📦 Phase 3: Implementation Plan
**Focus**: WHAT are the implementation tasks?
- Task breakdown with dependencies
- Integration with existing codebase
- Testing requirements
- Rollout strategy
- Rollback procedures

**NOT in Implementation Plan**: Code details, specific implementations

**Gate 3 - Implementation Readiness**:
```yaml
Validation Criteria:
  - [ ] All tasks clearly defined
  - [ ] Dependencies mapped
  - [ ] Testing strategy complete
  - [ ] Rollback plan exists
  - [ ] Team capacity confirmed
  - [ ] Risk mitigation planned
```

### ⚛️ Phase 4: Atomic Subtasks
**Focus**: HOW to implement with minimal context?
- Self-contained work units
- Zero-assumption instructions
- Specific file changes
- Test requirements
- Integration steps

**Gate 4 - Deployment Readiness**:
```yaml
Validation Criteria:
  - [ ] Each subtask is truly atomic
  - [ ] No external context required
  - [ ] Clear success criteria exists
  - [ ] Can be completed in <4 hours
  - [ ] Includes verification steps
  - [ ] Rollback plan included
```

## 🧠 Enhanced Tool Integration

### Memory MCP Usage Pattern
```yaml
Feature Development:
  Start: 
    - Load product context
    - Retrieve similar features
    - Check architectural patterns
  
  During:
    - Store design decisions
    - Track integration points
    - Note compatibility issues
  
  End:
    - Save validated outputs
    - Store successful patterns
    - Record learnings
```

### Sequential Thinking MCP
- Use for complex integrations
- Especially valuable for impact analysis
- Helps identify hidden dependencies

### Zen MCP Tools
- `thinkdeep`: For integration complexity
- `analyze`: For impact assessment
- `planner`: For task breakdown

## Confidence-Based Autonomy

### High Confidence (80%+)
- Similar feature implemented before
- Clear integration pattern exists
- Proceed autonomously

### Medium Confidence (50-79%)
- Some uncertainty in integration
- Multiple approach options
- Present alternatives to user

### Low Confidence (<50%)
- Novel feature type
- Complex integrations
- Request specific guidance

## Quick Start Commands

```bash
# Start new feature development
claude 2-pre-dev-feature/1-create-feature-brief.mdc

# After Feature Brief approval (Gate 1 passed)
claude 2-pre-dev-feature/2-create-technical-design.mdc

# After Technical Design approval (Gate 2 passed)
claude 2-pre-dev-feature/3-create-implementation-plan.mdc

# After Implementation Plan approval (Gate 3 passed)
claude 2-pre-dev-feature/4-create-subtasks.mdc
```

## Output Organization

```
docs/pre-development/features/
├── briefs/
│   └── feature-[name].md
├── designs/
│   └── design-[feature-name].md
├── plans/
│   └── plan-[feature-name].md
└── subtasks/
    └── F-[feature-id]/
        ├── ST-F[id]-01-[description].md
        ├── ST-F[id]-02-[description].md
        └── ST-F[id]-03-[description].md
```

## Integration Considerations

Since features are added to existing products:
1. Always load product context from Memory MCP
2. Reference existing architecture decisions
3. Maintain consistency with current patterns
4. Consider version compatibility
5. Plan for gradual rollout

## Success Metrics

- **Gate Pass Rate**: Target >90% (higher than product due to existing context)
- **Integration Issues**: <5% post-deployment
- **Pattern Reuse**: >80% from existing codebase
- **Time to Deploy**: 60% faster than new product features