---
description: Comprehensive security and compliance analysis combining vulnerabilities, dependencies, and privacy
globs:
alwaysApply: false
---
# Rule: Security & Compliance Analysis

## Goal

To identify security vulnerabilities, assess third-party risks, and ensure compliance with privacy regulations. This phase provides comprehensive security posture evaluation building on the technical foundation.

## üß† Enhanced Analysis Tools

### Memory MCP Integration
```yaml
Operations:
  - Search: Find security patterns, known vulnerabilities, compliance rules
  - Store: Save security findings, compliance gaps, remediation patterns
  - Retrieve: Get security best practices, OWASP guidelines, regulations
  
Tags: ["code-review", "security", "compliance", "vulnerabilities", "privacy", "repository-name"]
```

### Sequential Thinking MCP
```yaml
Use For:
  - Analyzing attack vectors
  - Tracing data flow for privacy
  - Understanding security boundaries
  - Planning remediation strategies
```

### Zen MCP Tools (CRITICAL FOR SECURITY)
- **secaudit**: Comprehensive security vulnerability assessment
- **debug**: Root cause analysis of vulnerabilities
- **thinkdeep**: Complex security scenario analysis
- **analyze**: Pattern recognition for security anti-patterns

### Task Tool (ESSENTIAL)
```yaml
Security Searches:
  - "Find authentication and authorization code"
  - "Search for cryptographic operations"
  - "Locate input validation patterns"
  - "Find sensitive data handling"
  - "Search for security configurations"
  - "Identify external API calls"
```

## Process: Layered Security Review

### Phase 1: Vulnerability Assessment
```yaml
Inputs Required:
  - Foundation Analysis (Gate 1 passed)
  - Architecture understanding
  - API contracts
  - Data flow patterns

Focus Areas:
  1. OWASP Top 10:
     - Injection vulnerabilities
     - Broken authentication
     - Sensitive data exposure
     - XXE, XSS, CSRF
     - Security misconfigurations
  
  2. Authentication & Authorization:
     - Token management
     - Session handling
     - Access control
     - Privilege escalation
  
  3. Data Security:
     - Encryption at rest/transit
     - Key management
     - Sensitive data handling
     - PII protection
```

### Phase 2: Dependency Security
```yaml
Analysis Scope:
  1. Direct Dependencies:
     - Version analysis
     - Known CVEs
     - License compliance
     - Update urgency
  
  2. Transitive Dependencies:
     - Dependency tree depth
     - Hidden vulnerabilities
     - Version conflicts
     - Supply chain risks
  
  3. Security Debt:
     - Outdated packages
     - Deprecated libraries
     - Unmaintained projects
     - High-risk dependencies
```

### Phase 3: Privacy & Compliance
```yaml
Compliance Frameworks:
  1. GDPR Compliance:
     - Data collection practices
     - Consent management
     - Right to deletion
     - Data portability
  
  2. Industry Standards:
     - PCI DSS (if payment)
     - HIPAA (if healthcare)
     - SOC 2 principles
     - ISO 27001 alignment
  
  3. Data Governance:
     - Data classification
     - Retention policies
     - Access controls
     - Audit trails
```

## Analysis Structure

### 1. Security Executive Summary
```markdown
## Security & Compliance Summary

**Overall Security Score**: [Critical/High/Medium/Low]
**Vulnerabilities Found**: [Count by severity]
**Dependency Risk**: [Critical/High/Medium/Low]
**Compliance Status**: [Compliant/Gaps/Non-compliant]

### Critical Findings
1. **üî¥ CRITICAL**: [Finding with immediate risk]
2. **üü° HIGH**: [Significant security issue]
3. **üü¢ MEDIUM**: [Security improvement needed]

### Compliance Gaps
- **GDPR**: [Status and gaps]
- **Industry**: [Specific compliance issues]
```

### 2. Vulnerability Analysis

#### Code Security Assessment
```markdown
### Authentication & Authorization
| Component | Implementation | Risk Level | Issue |
|-----------|---------------|------------|-------|
| Login | JWT tokens | High | No refresh token rotation |
| API Auth | Bearer tokens | Medium | Missing rate limiting |

### Input Validation
- **Coverage**: [Percentage of inputs validated]
- **Patterns**: [Validation approach]
- **Gaps**: [Missing validations]

### Vulnerability Details
1. **SQL Injection Risk**
   - Location: `src/api/users.js:45`
   - Severity: CRITICAL
   - Impact: Database compromise
   - Fix: Use parameterized queries
   ```javascript
   // Vulnerable code
   const query = `SELECT * FROM users WHERE id = ${userId}`;
   
   // Secure code
   const query = 'SELECT * FROM users WHERE id = ?';
   ```

2. **XSS Vulnerability**
   - Location: `src/views/profile.ejs:23`
   - Severity: HIGH
   - Impact: Session hijacking
   - Fix: HTML escape user content
```

#### Security Configuration
```markdown
### Security Headers
| Header | Status | Value | Recommendation |
|--------|--------|-------|----------------|
| CSP | ‚ùå Missing | - | Implement strict CSP |
| HSTS | ‚ö†Ô∏è Weak | max-age=300 | Increase to 31536000 |

### Encryption Analysis
- **At Rest**: [Status and method]
- **In Transit**: [TLS version and config]
- **Key Management**: [Approach and risks]
```

### 3. Dependency Security Report

```markdown
### Dependency Risk Matrix
| Package | Version | Latest | CVEs | Severity | Action |
|---------|---------|--------|------|----------|--------|
| express | 4.16.0 | 4.18.2 | 2 | HIGH | Update immediately |
| lodash | 4.17.11 | 4.17.21 | 1 | CRITICAL | Security patch required |

### Supply Chain Analysis
- **Total Dependencies**: [Count]
- **Direct**: [Count]
- **Transitive**: [Count]
- **With Vulnerabilities**: [Count]

### License Compliance
| License Type | Count | Risk | Packages |
|--------------|-------|------|----------|
| MIT | 45 | Low | [List] |
| GPL-3.0 | 2 | High | [Requires review] |
```

### 4. Privacy & Compliance Assessment

```markdown
### GDPR Compliance Checklist
- [x] Privacy policy exists
- [ ] Consent management implemented
- [ ] Data deletion API
- [ ] Data portability features
- [ ] Breach notification process

### Data Handling Review
| Data Type | Collection | Storage | Retention | Compliance |
|-----------|------------|---------|-----------|------------|
| Email | Login | Encrypted | Indefinite | ‚ùå No policy |
| IP Address | Logs | Plain text | 90 days | ‚ö†Ô∏è Review needed |

### Audit Trail Analysis
- **User Actions**: [Logged/Not logged]
- **Admin Actions**: [Comprehensive/Partial/None]
- **Data Access**: [Tracked/Not tracked]
- **Retention**: [Policy exists/Missing]
```

### 5. Threat Model
```markdown
### Attack Surface
1. **External APIs**
   - Endpoints: [Count]
   - Authentication: [Methods]
   - Rate limiting: [Status]

2. **User Input Points**
   - Forms: [Count and validation]
   - File uploads: [Restrictions]
   - API parameters: [Sanitization]

### Threat Scenarios
| Threat | Vector | Impact | Likelihood | Risk |
|--------|--------|--------|------------|------|
| Data breach | SQL injection | Critical | Medium | HIGH |
| Account takeover | Weak passwords | High | High | HIGH |
```

## Security Scoring

```yaml
Security Health Score:
  Vulnerabilities: [0-25]
    - No critical: 25
    - Few high: 15
    - Many issues: 5
  
  Dependencies: [0-25]
    - All updated: 25
    - Some outdated: 15
    - Many vulnerable: 5
  
  Configuration: [0-25]
    - Properly hardened: 25
    - Some gaps: 15
    - Major issues: 5
  
  Compliance: [0-25]
    - Fully compliant: 25
    - Minor gaps: 15
    - Non-compliant: 5

Total: [0-100]
Risk Level: [Critical/High/Medium/Low]
```

## Gate 2: Security Validation

### Multi-Dimensional Security Validation Framework

**Validation Dimensions:**
1. **Vulnerability Coverage** - Completeness of security analysis
2. **Risk Accuracy** - Correct severity and impact assessment
3. **Compliance Verification** - Regulatory requirement coverage
4. **Remediation Feasibility** - Practicality of fixes
5. **Supply Chain Security** - Third-party risk assessment

### Validation Methodology

#### 2A: Vulnerability Assessment Validation
```yaml
Purpose: Ensure all security vulnerabilities properly identified
Process: Cross-validation of findings with security frameworks

Validation Steps:
  1. OWASP Coverage Check:
     - [ ] All Top 10 categories assessed
     - [ ] Evidence provided for each finding
     - [ ] False positives eliminated
     - [ ] Severity ratings justified
  
  2. Attack Vector Verification:
     - [ ] All entry points identified
     - [ ] Attack scenarios realistic
     - [ ] Impact assessment accurate
     - [ ] Exploitability correctly rated
  
  3. Code Security Review:
     - [ ] Authentication flaws found
     - [ ] Authorization gaps identified
     - [ ] Input validation checked
     - [ ] Cryptographic issues assessed
```

#### 2B: Dependency Security Validation
```yaml
Purpose: Validate completeness of dependency risk analysis
Process: Verify CVE identification and supply chain assessment

Validation Criteria:
  - [ ] All dependencies scanned (direct + transitive)
  - [ ] CVE database current (< 24 hours old)
  - [ ] License risks accurately assessed
  - [ ] Update compatibility verified
  - [ ] Alternative packages identified for high-risk deps
```

#### 2C: Compliance Validation
```yaml
Purpose: Ensure regulatory compliance accurately assessed
Process: Map requirements to implementation gaps

Validation Points:
  - [ ] GDPR compliance checklist complete
  - [ ] Industry standards mapped (PCI, HIPAA, etc.)
  - [ ] Data classification accurate
  - [ ] Privacy controls verified
  - [ ] Audit trail requirements met
```

### Gate 2 Security Validation Checklist

```yaml
Vulnerability Assessment:
  Critical Vulnerabilities:
    - [ ] All CRITICAL issues have evidence
    - [ ] Exploitation POC provided where applicable
    - [ ] Business impact quantified
    - [ ] Fix complexity assessed
    Count: [X critical, Y high, Z medium]
  
  Coverage Quality:
    - [ ] Authentication thoroughly tested
    - [ ] Authorization completely mapped
    - [ ] Data validation comprehensive
    - [ ] Encryption properly assessed
    Coverage Score: [0-100%]

Dependency Security:
  CVE Status:
    - [ ] All known CVEs identified
    - [ ] Severity ratings verified
    - [ ] Patch availability checked
    - [ ] Workarounds documented
    Critical CVEs: [Count]
  
  Supply Chain:
    - [ ] Dependency tree fully mapped
    - [ ] Transitive risks identified
    - [ ] License compliance verified
    - [ ] Maintenance status checked
    Risk Level: [Low/Medium/High/Critical]

Compliance Status:
  Regulatory Requirements:
    - [ ] GDPR gaps identified and documented
    - [ ] Industry standards assessed
    - [ ] Data handling practices reviewed
    - [ ] Required controls mapped
    Compliance Score: [0-100%]
  
  Privacy Assessment:
    - [ ] PII handling verified
    - [ ] Consent mechanisms checked
    - [ ] Data retention validated
    - [ ] Right to deletion tested
    Privacy Risk: [Low/Medium/High]

Remediation Assessment:
  Fix Feasibility:
    - [ ] All fixes have effort estimates
    - [ ] Dependencies between fixes mapped
    - [ ] Resource requirements identified
    - [ ] Timeline realistic
    Total Effort: [Person-days]
  
  Risk Mitigation:
    - [ ] Temporary mitigations available
    - [ ] Monitoring enhanced for risks
    - [ ] Incident response updated
    - [ ] Communication plan ready
    Mitigation Coverage: [0-100%]

Gate 2 Decision Matrix:
  PASS Criteria (All must be true):
    - No unmitigated CRITICAL vulnerabilities
    - Compliance score ‚â• 80%
    - All high-risk dependencies have upgrade paths
    - Remediation plan approved
  
  CONDITIONAL Criteria:
    - CRITICAL issues have temporary mitigations
    - Compliance score 60-79%
    - Some high-risk dependencies remain
    - Extended timeline for fixes accepted
  
  FAIL Criteria (Any true = fail):
    - Unmitigated CRITICAL vulnerabilities exist
    - Compliance score < 60%
    - No feasible fix for critical issues
    - Data breach risk imminent

Security Score: [___]%
Decision: [PASS/CONDITIONAL/FAIL]
Rationale: [Detailed security posture explanation]
```

### Required Actions Before Next Phase

**If CONDITIONAL:**
1. Implement temporary mitigations
2. Create security monitoring plan
3. Schedule fix implementation
4. Document accepted risks

**If FAIL:**
1. Stop all deployment activities
2. Implement emergency fixes
3. Conduct security review
4. Re-assess after remediation

### Security Evidence Documentation

Required evidence for validation:
- Vulnerability scan reports
- Dependency analysis outputs
- Compliance mapping spreadsheet
- Penetration test results (if available)
- Security architecture review

## Remediation Priority

### üî¥ CRITICAL (Fix immediately - Production blocker)
```markdown
1. **SQL Injection in User API**
   - Severity: CRITICAL
   - Effort: 2 hours
   - Impact: Database compromise
   - Fix: Parameterized queries

2. **Hardcoded API Keys**
   - Severity: CRITICAL
   - Effort: 4 hours
   - Impact: Third-party compromise
   - Fix: Environment variables
```

### üü° HIGH (Fix within sprint)
```markdown
1. **Missing rate limiting**
   - Severity: HIGH
   - Effort: 1 day
   - Impact: DDoS vulnerability
   - Fix: Implement rate limiter

2. **Outdated dependencies**
   - Severity: HIGH
   - Effort: 2 days
   - Impact: Known exploits
   - Fix: Update packages
```

### üü¢ MEDIUM (Backlog)
```markdown
1. **Weak password policy**
   - Severity: MEDIUM
   - Effort: 1 day
   - Impact: Account compromise
   - Fix: Enforce strong passwords
```

## Output

**Location**: `/docs/code-review/2-security-compliance.md`

## Next Steps

After Gate 2 approval:
1. Security risks documented
2. Proceed to Quality & Operations
3. Implement critical fixes immediately
4. Plan security improvements

## Security Checklist

- [ ] OWASP Top 10 reviewed
- [ ] Authentication analyzed
- [ ] Authorization verified
- [ ] Data encryption checked
- [ ] Dependencies scanned
- [ ] Compliance assessed
- [ ] Threat model created
- [ ] Gate 2 validation complete